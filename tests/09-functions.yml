---
cases:
  - name: "simple function declaration"
    script: |
      foo() {
        echo this is foo
      }

      function bar() {
        foo
        echo this is bar
      }

      function baz {
        bar
        echo this is baz
      }

      baz
    expect:
      stdout: |
        this is foo
        this is bar
        this is baz

  - name: "can apply redirections on functions declaration"
    script: |
      foo() {
        cat
      } >foo.txt <<<"this is foo"

      function bar() {
        foo
        cat
      } >bar.txt <<<"this is bar"

      function baz {
        bar
        cat
      } >baz.txt <<<"this is baz"

      baz
    expect:
      files:
        foo.txt: "this is foo\n"
        bar.txt: "this is bar\n"
        baz.txt: "this is baz\n"

  - name: "can apply redirections on functions calls"
    script: |
      foo() {
        cat
      }

      function bar() {
        foo >foo.txt <<<"this is foo"
        cat
      }

      function baz {
        bar >bar.txt <<<"this is bar"
        cat
      }

      baz >baz.txt <<<"this is baz"

      echo foobar
    expect:
      stdout: "foobar\n"
      files:
        foo.txt: "this is foo\n"
        bar.txt: "this is bar\n"
        baz.txt: "this is baz\n"

  - name: "redirections applied on function declarations take precedence over those applied on function calls"
    script: |
      foo() {
        cat
        echo hey >&3
        echo cool >&4
      } >func.txt <<<"hello world" 3>third.txt

      foo >func2.txt <<<"foobar" 3>third2.txt 4>fourth.txt
    expect:
      files:
        func.txt: "hello world\n"
        func2.txt: ""
        third.txt: "hey\n"
        third2.txt: ""
        fourth.txt: "cool\n"

  - name: "can pass positional arguments to functions"
    args: [foo, bar]
    script: |
      echo $1 $2

      func(){
        echo $1 $2
      }

      func baz boo
      func bee fox
    expect:
      stdout: |
        foo bar
        baz boo
        bee fox

  - name: "special variables within functions are different"
    script: |
      func(){
        echo $1 $2
        echo $*
        echo $@
        echo $#
      }

      func foo bar
    expect:
      stdout: |
        foo bar
        foo bar
        foo bar
        2

  - name: "function declaration happens in same global scope scope"
    script: |
      inner

      outer(){
        inner(){
          echo from inner
        }
      }

      outer
      inner
    expect:
      stderr: |
        "inner": executable file not found in $PATH
      stdout: "from inner\n"

  - name: "function declaration in subshell do not affect global shell"
    script: |
      func

      (
        func(){
          echo from func
        }

        func
      )

      func
    expect:
      exit_code: 1
      stderr: |
        "func": executable file not found in $PATH
        "func": executable file not found in $PATH
      stdout: "from func\n"

  - name: "function runs in same outer context"
    script: |
      var=foo

      func(){
        echo $var
        var=bar
        echo $var
      }

      func
      echo $var
    expect:
      stdout: |
        foo
        bar
        bar

  - name: "can pass environment variables to a function"
    env:
      - lang=Go
    script: |
      func(){
        bash -c 'echo $hobby $lang'
      }

      hobby=dev
      hobby=tech lang=java func

      echo $hobby $lang
    expect:
      stdout: |
        tech java
        dev Go

  - name: "functions environment variables are inherited in subshells"
    script: |
      func(){
        (
          echo var:$var
        )

        echo var:$var
      }

      var=foobar func
    expect:
      stdout: |
        var:foobar
        var:foobar

  - name: "functions inherit exit code of calling shell"
    script: |
      func(){
        echo $?
      }

      false
      func

      true
      func
    expect:
      stdout: |
        1
        0

  - name: "function's exit code is the last command's exit code"
    script: |
      func(){
        true
      }

      func
      echo $?

      func2(){
        false
      }

      func2
      echo $?

      true | func2
      echo $?
    expect:
      stdout: |
        0
        1
        1

  - name: "functions local variables"
    script: |
      var=foobar
      echo var:$var

      func(){
        local var=bazboo
        echo var:$var
      }

      func
      echo var:$var


      # setting local variables does not affect global context
      var2=bob
      var3=zeof
      var4=beeb

      func2(){
        local var2=boz var3 var4
        var2=bee
        var3=feoz

        echo var2:$var2 var3:$var3 var4:$var4
      }

      func2
      echo var2:$var2 var3:$var3 var4:$var4
    expect:
      stdout: |
        var:foobar
        var:bazboo
        var:foobar
        var2:bee var3:feoz var4:
        var2:bob var3:zeof var4:beeb

  - name: "functions local variables are inherited by child functions, and setting them inside child functions affects the parent function's context"
    script: |
      var=foo
      echo var:$var

      func(){
        local var=bar
        echo var:$var

        func2(){
          var=baz
          echo var:$var
        }

        func2
        echo var:$var
      }

      func
      echo var:$var
    expect:
      stdout: |
        var:foo
        var:bar
        var:baz
        var:baz
        var:foo

  - name: "functions local variables are inherited in subshells"
    script: |
      func(){
        local var=foo

        (
          echo var:$var
          var=bar
          echo var:$var
        )

        echo var:$var
      }

      func
    expect:
      stdout: |
        var:foo
        var:bar
        var:foo

  - name: "functions local variables are ok to be used in nested constructs"
    script: |
      func(){
        if true; then
          if true; then
            local var=foo
          fi
        fi

        echo var:$var
      }

      func
      echo var:$var
    expect:
      stdout: |
        var:foo
        var:

  - name: "marking variable as local alters its value"
    script: |
      var=foo

      func(){
        local var
        echo var:$var
      }

      func
      echo var:$var
    expect:
      stdout: |
        var:
        var:foo

  - name: "can declare function to run in subshell"
    script: |
      var=foo

      func()(
        var=bar
      )

      echo var:$var
      func
      echo var:$var
    expect:
      stdout: |
        var:foo
        var:foo

  - name: "local variable cannot be declared outside of functions"
    script: |
      local var
    expect:
      build_error: "main.sh(0:0): semantic error: the `local` keyword cannot be used outside functions."

  - name: "can return from a function"
    script: |
      func(){
        echo foo
        return
        echo bar
      }

      func
      echo $?

      func2(){
        echo baz
        return 3
        echo boo
      }

      func2
      echo $?
    expect:
      stdout: |
        foo
        0
        baz
        3

  - name: "can return keyword can be nested in if statements "
    script: |
      func(){
        echo foo
        
        if true; then 
          if true; then 
            if true; then 
              return 2
            fi
          fi
        fi

        echo bar
      }

      func
      echo $?

      func2(){
        echo baz
        
        if false; then 
          return 3
        fi

        if true; then 
          return 4
        fi

        echo boo
      }

      func2
      echo $?
    expect:
      stdout: |
        foo
        2
        baz
        4
