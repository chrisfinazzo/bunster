---
cases:
  - name: "can test simple string comparison using the [...] syntax"
    script: |
      name=bunster
      [ $name = bunster ]
      echo '1': $?

      [ $name = bunsters ]
      echo '2': $?

      name=bunster
      [ $name != bunster ]
      echo '3': $?

      [ $name != bunsters ]
      echo '4': $?


      [ a < z ]
      echo '5': $?

      [ z < a ]
      echo '6': $?

      [ a > z ]
      echo '7': $?

      [ z > a ]
      echo '8': $?

      [ bunster == bunster ]
      echo '9': $?

      [ bunster == not-bunster ]
      echo '10': $?
    expect:
      stdout: |
        1: 0
        2: 1
        3: 1
        4: 0
        5: 0
        6: 1
        7: 1
        8: 0
        9: 0
        10: 1

  - name: "can test simple arithmetic comparison using the [...] syntax"
    script: |
      [ 100 -eq 100 ]
      echo '1': $?

      [ 100 -eq 2129 ]
      echo '2': $?

      [ 100 -ne 100 ]
      echo '3': $?

      [ 100 -ne 2129 ]
      echo '4': $?

      [ 99 -lt 100 ]
      echo '5': $?

      [ 100 -lt 100 ]
      echo '6': $?

      [ 99 -le 100 ]
      echo '7': $?

      [ 100 -le 100 ]
      echo '8': $?

      [ 200 -le 100 ]
      echo '9': $?

      [ 100 -gt 100 ]
      echo '10': $?

      [ 200 -gt 100 ]
      echo '11': $?

      [ 99 -ge 100 ]
      echo '12': $?

      [ 100 -ge 100 ]
      echo '13': $?

      [ 200 -ge 100 ]
      echo '14': $?
    expect:
      stdout: |
        1: 0
        2: 1
        3: 1
        4: 0
        5: 0
        6: 1
        7: 0
        8: 0
        9: 1
        10: 1
        11: 0
        12: 1
        13: 0
        14: 0

  - name: "can test that two files have same DeviceId and InodeId using the [...] syntax"
    script: |
      touch file1
      ln file1 file2
      touch file3
      ln -s file1 file1_sumbolic
      ln -s file2 file2_sumbolic

      [ file1 -ef file2 ]
      echo '1': $?

      [ file1 -ef file3 ]
      echo '2': $?

      [ file1_sumbolic -ef file2_sumbolic ]
      echo '3': $?
    expect:
      stdout: |
        1: 0
        2: 1
        3: 0

  - name: "can test that a file is older than another by modification time using the [...] syntax"
    script: |
      touch file1
      sleep 0.5
      touch file2
      ln -s file2 file2_sumbolic
      ln -s file1 file1_sumbolic

      [ file1 -ot file2 ]
      echo '1': $?

      [ file2 -ot file1 ]
      echo '2': $?

      [ file1 -ot file3 ]
      echo '3': $?

      [ file3 -ot file1 ]
      echo '4': $?

      [ file1_sumbolic -ot file2_sumbolic ]
      echo '5': $?
    expect:
      stdout: |
        1: 0
        2: 1
        3: 1
        4: 0
        5: 0

  - name: "can test that a file is newer than another by modification time using the [...] syntax"
    script: |
      touch file1
      sleep 0.5
      touch file2
      ln -s file1 file1_sumbolic
      ln -s file2 file2_sumbolic

      [ file1 -nt file2 ]
      echo '1': $?

      [ file2 -nt file1 ]
      echo '2': $?

      [ file1 -nt file3 ]
      echo '3': $?

      [ file3 -nt file1 ]
      echo '4': $?

      [ file2_sumbolic -nt file1_sumbolic ]
      echo '5': $?
    expect:
      stdout: |
        1: 1
        2: 0
        3: 0
        4: 1
        5: 0

  - name: "can test against the length of a string using the [...] syntax"
    script: |
      greet="hello world"
      var=

      [ something ]
      echo '1': $?

      [ "" ]
      echo '2': $?

      [ $var ]
      echo '3': $?

      [ $greet ]
      echo '4': $?

      [ $( echo foo ) ]
      echo '5': $?

      [ $( true ) ]
      echo '6': $?

      [ -n $var ]
      echo '7': $?

      [ -n $greet ]
      echo '8': $?

      [ -z $var ]
      echo '9': $?

      [ -z $greet ]
      echo '10': $?
    expect:
      stdout: |
        1: 0
        2: 1
        3: 1
        4: 0
        5: 0
        6: 1
        7: 1
        8: 0
        9: 0
        10: 1

  - name: "can test the existence of a file or directory using the [...] syntax"
    script: |
      mkdir dir
      mkdir non-permitted-dir
      touch non-permitted-dir/non-permitted-file
      chmod 000 non-permitted-dir
      touch file file2
      ln -s file file_symbolic
      ln -s file2 file2_symbolic
      rm file2 # we remove this file so that the symbolic becomes broken

      [ -a non-existing-file ]
      echo '1': $?

      [ -a non-permitted-dir/non-permitted-file ]
      echo '2': $?

      [ -a non-permitted-dir ]
      echo '3': $?

      [ -a dir ]
      echo '4': $?

      [ -a file ]
      echo '5': $?

      [ -a file_symbolic ]
      echo '6': $?

      [ -a file2_symbolic ]
      echo '7': $?

      [ -e non-existing-file ]
      echo '8': $?

      [ -e non-permitted-dir/non-permitted-file ]
      echo '9': $?

      [ -e non-permitted-dir ]
      echo '10': $?

      [ -e dir ]
      echo '11': $?

      [ -e file ]
      echo '12': $?

      [ -e file_symbolic ]
      echo '13': $?

      [ -e file2_symbolic ]
      echo '14': $?

      chmod 777 non-permitted-dir
    expect:
      stdout: |
        1: 1
        2: 1
        3: 0
        4: 0
        5: 0
        6: 0
        7: 1
        8: 1
        9: 1
        10: 0
        11: 0
        12: 0
        13: 0
        14: 1

  - name: "can test the existence of a directory using the [...] syntax"
    script: |
      mkdir dir
      mkdir non-permitted-dir
      mkdir non-permitted-dir/dir
      chmod 000 non-permitted-dir
      touch file
      ln -s dir dir_symbolic

      [ -d non-existing-dir ]
      echo '1': $?

      [ -d non-permitted-dir ]
      echo '2': $?

      [ -d non-permitted-dir/dir ]
      echo '3': $?

      [ -d dir ]
      echo '4': $?

      [ -d file ]
      echo '5': $?

      [ -d dir_symbolic ]
      echo '6': $?

      chmod 777 non-permitted-dir
    expect:
      stdout: |
        1: 1
        2: 0
        3: 1
        4: 0
        5: 1
        6: 0

  - name: "can test the existence of a block special file using the [...] syntax"
    runs_on: linux
    script: |
      touch file
      DEVICE=$(lsblk -nd -o PATH | head -n 1)
      ln -s $DEVICE device_symbolic

      [ -b $DEVICE ]
      echo '1': $?

      [ -b non-existing-file ]
      echo '2': $?

      [ -b /dev/null ]
      echo '3': $?

      [ -b file ]
      echo '4': $?

      [ -b device_symbolic ]
      echo '5': $?
    expect:
      stdout: |
        1: 0
        2: 1
        3: 1
        4: 1
        5: 0

  - name: "can test the existence of a block special file using the [...] syntax"
    runs_on: darwin
    script: |
      touch file
      DEVICE=$(diskutil list | grep '/dev/disk' | head -n 1 | awk '{print $1}')
      ln -s $DEVICE device_symbolic

      [ -b $DEVICE ]
      echo '1': $?

      [ -b non-existing-file ]
      echo '2': $?

      [ -b /dev/null ]
      echo '3': $?

      [ -b file ]
      echo '4': $?

      [ -b device_symbolic ]
      echo '5': $?
    expect:
      stdout: |
        1: 0
        2: 1
        3: 1
        4: 1
        5: 0

  - name: "can test the existence of a character special file using the [...] syntax"
    runs_on: linux
    script: |
      ln -s /dev/null null_symbolic

      [ -c /dev/null ]
      echo '1': $?

      [ -c null_symbolic ]
      echo '2': $?

      [ -c non-existing-file ]
      echo '3': $?

      touch file
      [ -c file ]
      echo '4': $?

      BLOCK_DEVICE=$(lsblk -nd -o PATH | head -n 1)
      [ -c $BLOCK_DEVICE ]
      echo '5': $?
    expect:
      stdout: |
        1: 0
        2: 0
        3: 1
        4: 1
        5: 1

  - name: "can test the existence of a character special file using the [...] syntax"
    runs_on: darwin
    script: |
      ln -s /dev/null null_symbolic

      [ -c /dev/null ]
      echo '1': $?

      [ -c null_symbolic ]
      echo '2': $?

      [ -c non-existing-file ]
      echo '3': $?

      touch file
      [ -c file ]
      echo '4': $?

      BLOCK_DEVICE=$(diskutil list | grep '/dev/disk' | head -n 1 | awk '{print $1}')
      [ -c $BLOCK_DEVICE ]
      echo '5': $?
    expect:
      stdout: |
        1: 0
        2: 0
        3: 1
        4: 1
        5: 1

  - name: "can test the existence of a regular file using the [...] syntax"
    script: |
      touch file
      ln -s file file_symbolic

      [ -f /dev/null ]
      echo '1': $?

      [ -f non-existing-file ]
      echo '2': $?

      [ -f file ]
      echo '3': $?

      [ -f file_symbolic ]
      echo '4': $?
    expect:
      stdout: |
        1: 1
        2: 1
        3: 0
        4: 0

  - name: "can test that the SGID of a file is set using the [...] syntax"
    script: |
      touch good-file bad-file
      chmod 2644 good-file
      chmod 0644 bad-file
      mkdir dir dir2
      chmod 2755 dir
      ln -s good-file good-file-symbolic
      ln -s bad-file bad-file-symbolic

      [ -g good-file ]
      echo '1': $?

      [ -g bad-file ]
      echo '2': $?

      [ -g dir ]
      echo '3': $?

      [ -g dir2 ]
      echo '4': $?

      [ -g good-file-symbolic ]
      echo '5': $?

      [ -g bad-file-symbolic ]
      echo '6': $?
    expect:
      stdout: |
        1: 0
        2: 1
        3: 0
        4: 1
        5: 0
        6: 1

  - name: "can test that a file is a symbolic link using the [...] syntax"
    script: |
      touch file
      ln -s file symb

      [ -h symb ]
      echo '1': $?

      [ -h file ]
      echo '2': $?

      [ -h missing-file ]
      echo '3': $?

      [ -L symb ]
      echo '4': $?

      [ -L file ]
      echo '5': $?

      [ -L missing-file ]
      echo '6': $?
    expect:
      stdout: |
        1: 0
        2: 1
        3: 1
        4: 0
        5: 1
        6: 1

  - name: "can test that a file/directory has sticky bit set using the [...] syntax"
    script: |
      touch file file2
      chmod +t file
      ln -s file file_symbolic
      ln -s file2 file2_symbolic

      [ -k file ]
      echo '1': $?

      [ -k file2 ]
      echo '2': $?

      [ -k missing-file ]
      echo '3': $?

      [ -k file_symbolic ]
      echo '4': $?

      [ -k file2_symbolic ]
      echo '5': $?
    expect:
      stdout: |
        1: 0
        2: 1
        3: 1
        4: 0
        5: 1

  - name: "can test that a file is a pipe (FIFO) using the [...] syntax"
    script: |
      mkfifo file
      touch file2
      ln -s file file_symbolic
      ln -s file2 file2_symbolic

      [ -p file ]
      echo '1': $?

      [ -p file2 ]
      echo '2': $?

      [ -p missing-file ]
      echo '3': $?

      [ -p file_symbolic ]
      echo '4': $?

      [ -p file2_symbolic ]
      echo '5': $?
    expect:
      stdout: |
        1: 0
        2: 1
        3: 1
        4: 0
        5: 1

  - name: "can test that a file/directory is readable using the [...] syntax"
    script: |
      touch file file2
      mkdir dir dir2
      chmod 344 file
      chmod 366 dir
      ln -s file file_symbolic
      ln -s file2 file2_symbolic
      ln -s dir dir_symbolic
      ln -s dir2 dir2_symbolic

      [ -r file ]
      echo '1': $?

      [ -r file2 ]
      echo '2': $?

      [ -r missing-file ]
      echo '3': $?

      [ -r dir ]
      echo '4': $?

      [ -r dir2 ]
      echo '5': $?

      [ -r file_symbolic ]
      echo '6': $?

      [ -r file2_symbolic ]
      echo '7': $?

      [ -r dir_symbolic ]
      echo '8': $?

      [ -r dir2_symbolic ]
      echo '9': $?
    expect:
      stdout: |
        1: 1
        2: 0
        3: 1
        4: 1
        5: 0
        6: 1
        7: 0
        8: 1
        9: 0

  - name: "can test that a file has a size greater than zero using the [...] syntax"
    script: |
      cat <<<foobar >file
      touch file2
      ln -s file file_sumbolic
      ln -s file2 file2_sumbolic

      [ -s file ]
      echo '1': $?

      [ -s file2 ]
      echo '2': $?

      [ -s missing-file ]
      echo '3': $?

      [ -s file_sumbolic ]
      echo '4': $?

      [ -s file2_sumbolic ]
      echo '5': $?
    expect:
      stdout: |
        1: 0
        2: 1
        3: 1
        4: 0
        5: 1

  - name: "can test that a file is a terminal using the [...] syntax"
    runs_on: linux
    # by the way, we wrap the call within a group {...} because we don't want tests to fail if redirections on [...] is buggy.
    script: |
      {
        [ -t 3 ]
      } 3>/dev/null

      echo '1': $?

      {
        [ -t 3 ]
      } 3>/dev/ptmx

      echo '2': $?

      [ -t invalid-fd ]
      echo '3': $?

    expect:
      stdout: |
        1: 1
        2: 0
        3: 1

  - name: "can test that a file is a terminal using the [...] syntax"
    runs_on: darwin
    # by the way, we wrap the call within a group {...} because we don't want tests to fail if redirections on [...] is buggy.
    script: |
      {
        [ -t 3 ]
      } 3>/dev/null

      echo '1': $?

      [ -t invalid-fd ]
      echo '2': $?

    expect:
      stdout: |
        1: 1
        2: 1

  - name: "can test that the SUID of a file is set using the [...] syntax"
    script: |
      touch good-file bad-file
      chmod u+s good-file
      chmod u-s bad-file
      mkdir dir 
      chmod u+s dir
      ln -s good-file good-file-symbolic
      ln -s bad-file bad-file-symbolic

      [ -u good-file ]
      echo '1': $?

      [ -u bad-file ]
      echo '2': $?

      [ -u dir ]
      echo '3': $?

      [ -u good-file-symbolic ]
      echo '4': $?

      [ -u bad-file-symbolic ]
      echo '5': $?
    expect:
      stdout: |
        1: 0
        2: 1
        3: 0
        4: 0
        5: 1

  - name: "can test that a file/directory is writable using the [...] syntax"
    script: |
      touch file file2
      mkdir dir dir2
      chmod 444 file
      chmod 444 dir
      ln -s file file_symbolic
      ln -s file2 file2_symbolic

      [ -w file ]
      echo '1': $?

      [ -w file2 ]
      echo '2': $?

      [ -w missing-file ]
      echo '3': $?

      [ -w dir ]
      echo '4': $?

      [ -w dir2 ]
      echo '5': $?

      [ -w file_symbolic ]
      echo '6': $?

      [ -w file2_symbolic ]
      echo '7': $?
    expect:
      stdout: |
        1: 1
        2: 0
        3: 1
        4: 1
        5: 0
        6: 1
        7: 0

  - name: "can test that a file/directory is executable using the [...] syntax"
    script: |
      touch file file2
      mkdir dir dir2
      chmod 166 file
      chmod 666 dir
      ln -s file file_symbolic
      ln -s file2 file2_symbolic

      [ -x file ]
      echo '1': $?

      [ -x file2 ]
      echo '2': $?

      [ -x missing-file ]
      echo '3': $?

      [ -x dir ]
      echo '4': $?

      [ -x dir2 ]
      echo '5': $?

      [ -x file_symbolic ]
      echo '6': $?

      [ -x file2_symbolic ]
      echo '7': $?
    expect:
      stdout: |
        1: 0
        2: 1
        3: 1
        4: 1
        5: 0
        6: 0
        7: 1

  - name: "can test that a file/directory is owned by current group and user using the [...] syntax"
    script: |
      touch file 
      mkdir dir 
      ln -s file file_symbolic

      [ -G file ]
      echo '1': $?

      [ -G file_symbolic ]
      echo '2': $?

      [ -G missing-file ]
      echo '3': $?

      [ -G dir ]
      echo '4': $?

      [ -G /root ]
      echo '5': $?

      [ -O file ]
      echo '6': $?

      [ -O file_symbolic ]
      echo '7': $?

      [ -O missing-file ]
      echo '8': $?

      [ -O dir ]
      echo '9': $?

      [ -O /root ]
      echo '10': $?
    expect:
      stdout: |
        1: 0
        2: 0
        3: 1
        4: 0
        5: 1
        6: 0
        7: 0
        8: 1
        9: 0
        10: 1

  #TODO: this test fails sometimes just because the system does not find enough time to edit file's modification time due to the script's speed.
  - name: "can test that a file has been modified since it was last read using the [...] syntax"
    runs_on: none #FIXME
    script: |
      touch file 
      ln -s file file_symbolic

      [ -N file ]
      echo '1': $?

      [ -N file_symbolic ]
      echo '2': $?

      cat file >/dev/null

      [ -N file ]
      echo '3': $?

      [ -N file_symbolic ]
      echo '4': $?

      echo foo >file

      [ -N file ]
      echo '5': $?

      [ -N file_symbolic ]
      echo '6': $?
    expect:
      stdout: |
        1: 1
        2: 1
        3: 1
        4: 1
        5: 0
        6: 0

  - name: "can test that a file is a socket using the [...] syntax"
    script: |
      touch file
      python3 -c "import socket as s; sock = s.socket(s.AF_UNIX); sock.bind('file.sock')"
      ln -s file file_symbolic
      ln -s file.sock file_sock_symbolic

      [ -S file.sock ]
      echo '1': $?

      [ -S file ]
      echo '2': $?

      [ -S missing-file ]
      echo '3': $?

      [ -S file_sock_symbolic ]
      echo '4': $?

      [ -S file_symbolic ]
      echo '5': $?
    expect:
      stdout: |
        1: 0
        2: 1
        3: 1
        4: 0
        5: 1

  - name: "can test that a variable is set using the [...] syntax"
    env:
      - env_var=foo
      - env_var2=
    script: |
      var=foo
      var2=

      [ -v var ]
      echo '1': $?

      [ -v var2 ]
      echo '2': $?

      [ -v unset_var ]
      echo '3': $?

      [ -v env_var ]
      echo '4': $?

      [ -v env_var2 ]
      echo '5': $?

      func(){
        local var3=foo
        
        func2(){
          local var4=foo
          
          [ -v var3 ]
          echo '6': $?

          [ -v var4 ]
          echo '7': $?
        }
      }

      func
      func2
    expect:
      stdout: |
        1: 0
        2: 0
        3: 1
        4: 0
        5: 0
        6: 1
        7: 0

  - name: "can negate a test expression using the [...] syntax"
    script: |
      [ ! foobar ]
      echo '1': $?

      touch file
      [ ! -f file ]
      echo '2': $?

      [ ! -f missing-file ]
      echo '3': $?

      [ ! foo = bar ]
      echo '4': $?

      [ ! foo = foo ]
      echo '5': $?
    expect:
      stdout: |
        1: 1
        2: 1
        3: 0
        4: 0
        5: 1

  - name: "can use the AND logical operator in test expressions using the [...] syntax"
    script: |
      [ foo -a bar ]
      echo '1': $?

      [ foo -a -f missin-file ]
      echo '2': $?

      touch file
      [ foo -a -f file ]
      echo '3': $?

      [ ! "" -a ! "" ]
      echo '4': $?
    expect:
      stdout: |
        1: 0
        2: 1
        3: 0
        4: 0

  - name: "the AND logical operator only evaluates second expression if the first expression is true in the [...] syntax"
    script: |
      touch file

      [ "" -a $(rm file) ]

      [ -f file ]

      echo $?
    expect:
      stdout: |
        0

  - name: "can use the OR logical operator in test expressions using the [...] syntax"
    script: |
      [ foo -o bar ]
      echo '1': $?

      [ "" -o bar ]
      echo '2': $?

      [ foo -o "" ]
      echo '3': $?

      [ "" -o "" ]
      echo '4': $?

      [ -f file -o ! -f file ]
      echo '5': $?
    expect:
      stdout: |
        1: 0
        2: 0
        3: 0
        4: 1
        5: 0

  - name: "the OR logical operator only evaluates second expression if the first expression is false in the [...] syntax"
    script: |
      touch file

      [ foo -o $(rm file) ]

      [ -f file ]

      echo $?
    expect:
      stdout: |
        0

  - name: "can group conditional expressions using the [...] syntax"
    script: |
      [ (foo) ]
      echo 1: $?

      [ (-n foo) ]
      echo 2: $?

      [ (-n foo -a -n bar) ]
      echo 3: $?

      [ ! ("" -o bar) ]
      echo 4: $?
    expect:
      stdout: |
        1: 0
        2: 0
        3: 0
        4: 1
