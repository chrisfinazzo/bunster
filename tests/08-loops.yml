---
cases:
  - name: "simple `while` command"
    script: |
      n=0

      while [ $n -lt 5 ]; do
        echo $n

        n=$(expr $n + 1)
      done
    expect:
      stdout: |
        0
        1
        2
        3
        4

  - name: "`while` command only cares about last command's exit code"
    script: |
      n=0

      while
        false 
        [ $n -lt 5 ]
      do
        echo $n

        n=$(expr $n + 1)
      done
    expect:
      stdout: |
        0
        1
        2
        3
        4

  - name: "`while` command header does not affect the shell's status code"
    script: |
      while  false ; do
        echo foo
      done
    expect:
      exit_code: 0

  - name: "can use redirctions on `while` loop"
    script: |
      n=0

      while  [ $n -lt 3 ] ; do
        cat
          echo error >&2
          echo alternative output >&3

          n=$(expr $n + 1)
      done <<<"Hello World" >output.txt 2>error.txt 3>alternate.txt
    expect:
      files:
        output.txt: "Hello World\n"
        error.txt: |
          error
          error
          error
        alternate.txt: |
          alternative output
          alternative output
          alternative output

  - name: "`while` loop within pipeline"
    script: |
      n=0

      while  [ $n -lt 3 ] ; do
           echo $n

          n=$(expr $n + 1)
      done | cat
    expect:
      stdout: |
        0
        1
        2

  - name: "can break out of `while` loop"
    script: |
      n=0

      while true; do
          echo $n:start

          break

          echo $n:end
      done | cat
    expect:
      stdout: |
        0:start

  - name: "`break` can be in list within `while` loop"
    script: |
      n=0

      while true; do
          echo $n:start

          [ $n -ge 3 ] && break

          echo $n:end

          n=$(expr $n + 1)
      done | cat
    expect:
      stdout: |
        0:start
        0:end
        1:start
        1:end
        2:start
        2:end
        3:start

  - name: "can continue a `while` loop"
    script: |
      n=0

      while [ $n -lt 3 ]; do
          echo $n:start

          n=$(expr $n + 1)

          continue

          echo $n:end
      done | cat
    expect:
      stdout: |
        0:start
        1:start
        2:start

  - name: "`continue` can be in list within `while` loop"
    script: |
      n=0

      while  [ $n -lt 5 ] ; do
          n=$(expr $n + 1)

          echo $n:start

          [ $n -eq 3 ] && continue

          echo $n:end
      done | cat
    expect:
      stdout: |
        1:start
        1:end
        2:start
        2:end
        3:start
        4:start
        4:end
        5:start
        5:end

  - name: "simple `until` command"
    script: |
      n=0

      until [ $n -ge 5 ]; do
        echo $n

        n=$(expr $n + 1)
      done
    expect:
      stdout: |
        0
        1
        2
        3
        4

  - name: "`until` command only cares about last command's exit code"
    script: |
      n=0

      until
        false 
        [ $n -ge 5 ]
      do
        echo $n

        n=$(expr $n + 1)
      done
    expect:
      stdout: |
        0
        1
        2
        3
        4

  - name: "`until` command header does not affect the shell's status code"
    script: |
      until  true ; do
        echo foo
      done
    expect:
      exit_code: 0

  - name: "can use redirctions on `until` loop"
    script: |
      n=0

      until  [ $n -ge 3 ] ; do
        cat
          echo error >&2
          echo alternative output >&3

          n=$(expr $n + 1)
      done <<<"Hello World" >output.txt 2>error.txt 3>alternate.txt
    expect:
      files:
        output.txt: "Hello World\n"
        error.txt: |
          error
          error
          error
        alternate.txt: |
          alternative output
          alternative output
          alternative output

  - name: "`until` loop within pipeline"
    script: |
      n=0

      until  [ $n -ge 3 ] ; do
           echo $n

          n=$(expr $n + 1)
      done | cat
    expect:
      stdout: |
        0
        1
        2

  - name: "can break out of `until` loop"
    script: |
      n=0

      until false; do
          echo $n:start

          break

          echo $n:end
      done | cat
    expect:
      stdout: |
        0:start

  - name: "`break` can be in list within `until` loop"
    script: |
      n=0

      until false; do
          echo $n:start

          [ $n -ge 3 ] && break

          echo $n:end

          n=$(expr $n + 1)
      done | cat
    expect:
      stdout: |
        0:start
        0:end
        1:start
        1:end
        2:start
        2:end
        3:start

  - name: "can continue a `until` loop"
    script: |
      n=0

      until [ $n -ge 3 ]; do
          echo $n:start

          n=$(expr $n + 1)

          continue

          echo $n:end
      done | cat
    expect:
      stdout: |
        0:start
        1:start
        2:start

  - name: "`continue` can be in list within `until` loop"
    script: |
      n=0

      until  [ $n -ge 5 ] ; do
          n=$(expr $n + 1)

          echo $n:start

          [ $n -eq 3 ] && continue

          echo $n:end
      done | cat
    expect:
      stdout: |
        1:start
        1:end
        2:start
        2:end
        3:start
        4:start
        4:end
        5:start
        5:end

  - name: "simple `for` loop"
    args: ["foo", "bar", "baz"]
    script: |
      # over positional
      for arg; do
        echo positional: $arg
      done

      for arg in boo boz fee; do
        echo inline: $arg
      done
    expect:
      stdout: |
        positional: foo
        positional: bar
        positional: baz
        inline: boo
        inline: boz
        inline: fee

  - name: "redirections on the `for` loop"
    args: ["foo", "bar", "baz"]
    script: |
      for arg; do
          cat
          echo error >&2
          echo alternative output >&3
      done <<<"Hello World" >output.txt 2>error.txt 3>alternate.txt
    expect:
      files:
        output.txt: "Hello World\n"
        error.txt: |
          error
          error
          error
        alternate.txt: |
          alternative output
          alternative output
          alternative output

  - name: "`for` loop within pipeline"
    args: ["foo", "bar", "baz"]
    script: |
      for arg; do
        echo positional: $arg
      done   |  cat

      for arg in boo boz fee; do
          echo inline: $arg
          cat
      done |  cat
    expect:
      stdout: |
        positional: foo
        positional: bar
        positional: baz
        inline: boo
        inline: boz
        inline: fee

  - name: "`for` loop within list"
    args: ["foo", "bar", "baz"]
    script: |
      for arg; do
        echo positional: $arg
      done   &&

        for arg in boo boz fee; do
          echo inline: $arg
        done
    expect:
      stdout: |
        positional: foo
        positional: bar
        positional: baz
        inline: boo
        inline: boz
        inline: fee

  - name: "break and continue within `for` loop"
    args: ["foo", "bar", "baz"]
    script: |
      for arg; do
        echo before 1
        continue
        echo after 1
      done

      for arg; do
        echo before 2
        break
        echo after 2
      done

      for arg in foo bar baz; do
        echo before 3
        continue
        echo after 3
      done

      for arg in foo bar baz; do
        echo before 4
        break
        echo after 4
      done
    expect:
      stdout: |
        before 1
        before 1
        before 1
        before 2
        before 3
        before 3
        before 3
        before 4

  - name: "simple `for((...))` loop"
    script: |
      for (( i = 0; i < 5; i++ )) do
        echo $i
      done
    expect:
      stdout: |
        0
        1
        2
        3
        4

  - name: "`for((...))` without init branch"
    script: |
      for (( ; i < 5; i++ )) do
        echo $i
      done
    expect:
      stdout: |

        1
        2
        3
        4

  - name: "`for((...))` with init branch only"
    script: |
      for (( i=0 ; ; )) do
        echo $i

        (( i >= 5 )) && break || (( i++ )) 
      done
    expect:
      stdout: |
        0
        1
        2
        3
        4
        5

  - name: "`for((...))` without update branch"
    script: |
      for (( i = 0; i < 5; )) do
        echo $i

        (( i++ ))
      done
    expect:
      stdout: |
        0
        1
        2
        3
        4

  - name: "`for((...))` with update branch only"
    script: |
      let i=0

      for (( ; ; i++ )) do
        echo $i
        (( i >= 5 )) && break
       done
    expect:
      stdout: |
        0
        1
        2
        3
        4
        5

  - name: "`for((...))` without test branch"
    script: |
      for (( i = 0; ; i++ )) do
        echo $i

        (( i >= 5 )) && break
      done
    expect:
      stdout: |
        0
        1
        2
        3
        4
        5

  - name: "`for((...))` with test branch only"
    script: |
      let i = 0
      for (( ; i <= 5; )) do
        echo $i

        (( i++ ))
      done
    expect:
      stdout: |
        0
        1
        2
        3
        4
        5

  - name: "`for((...))` without any branches"
    script: |
      let i = 1

      for (( ; ; )) do
        echo $i

        (( i >= 5 )) && break || (( i++ )) 
      done
    expect:
      stdout: |
        1
        2
        3
        4
        5
