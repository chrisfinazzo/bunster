cases:
  - name: "simple `while` command"
    script: |
      n=0

      while [ $n -lt 5 ]; do
        echo $n

        n=$(expr $n + 1)
      done
    expect:
      stdout: |
        0
        1
        2
        3
        4

  - name: "`while` command only cares about last command's exit code"
    script: |
      n=0

      while
        false 
        [ $n -lt 5 ]
      do
        echo $n

        n=$(expr $n + 1)
      done
    expect:
      stdout: |
        0
        1
        2
        3
        4

  - name: "`while` command header does not affect the shell's status code"
    script: |
      while  false ; do
        echo foo
      done
    expect:
      exit_code: 0

  - name: "can use redirctions on `while` loop"
    script: |
      n=0

      while  [ $n -lt 3 ] ; do
        cat
          echo error >&2
          echo alternative output >&3

          n=$(expr $n + 1)
      done <<<"Hello World" >output.txt 2>error.txt 3>alternate.txt
    expect:
      files:
        output.txt: "Hello World\n"
        error.txt: |
          error
          error
          error
        alternate.txt: |
          alternative output
          alternative output
          alternative output

  - name: "`while` loop within pipeline"
    script: |
      n=0

      while  [ $n -lt 3 ] ; do
           echo $n

          n=$(expr $n + 1)
      done | cat
    expect:
      stdout: |
        0
        1
        2

  - name: "can break out of `while` loop"
    script: |
      n=0

      while true; do
          echo $n:start

          break

          echo $n:end
      done | cat
    expect:
      stdout: |
        0:start

  - name: "`break` can be in list within `while` loop"
    script: |
      n=0

      while true; do
          echo $n:start

          [ $n -ge 3 ] && break

          echo $n:end

          n=$(expr $n + 1)
      done | cat
    expect:
      stdout: |
        0:start
        0:end
        1:start
        1:end
        2:start
        2:end
        3:start

  - name: "`break`  can be nested in if statements within `while` loops"
    script: |
      while true; do
        echo foo
        if true; then
          break
        fi
        echo bar
      done

      while true; do
        echo baz
        if true; then
          if true; then 
            if true; then
              break
            fi
          fi
        fi
        echo boo
      done

      while true; do
          if false; then 
            echo bee
            break
          fi

          if true; then
            break
          fi
        echo boo
      done
    expect:
      stdout: |
        foo
        baz

  - name: "can continue a `while` loop"
    script: |
      n=0

      while [ $n -lt 3 ]; do
          echo $n:start

          n=$(expr $n + 1)

          continue

          echo $n:end
      done | cat
    expect:
      stdout: |
        0:start
        1:start
        2:start

  - name: "`continue` can be in list within `while` loop"
    script: |
      n=0

      while  [ $n -lt 5 ] ; do
          n=$(expr $n + 1)

          echo $n:start

          [ $n -eq 3 ] && continue

          echo $n:end
      done | cat
    expect:
      stdout: |
        1:start
        1:end
        2:start
        2:end
        3:start
        4:start
        4:end
        5:start
        5:end

  - name: "`continue`  can be nested in if statements within `while` loops"
    script: |
      let n = 0
      while ((n < 3)); do
        let n++

        echo $n:foo
        if true; then
          continue
        fi
        echo bar
      done

      echo 

      let n = 0
      while ((n < 3)); do
        let n++

        echo $n:foo
        if true; then
          if true; then
            if true; then
              continue
            fi
          fi
        fi
        echo bar
      done

      echo 

      let n = 0

      while ((n < 3)); do
        let n++
        
        echo $n:foo
        
        if false; then 
          echo bar
          continue
        fi

        if true; then
          continue
        fi
        
        echo baz
      done
    expect:
      stdout: |
        1:foo
        2:foo
        3:foo

        1:foo
        2:foo
        3:foo

        1:foo
        2:foo
        3:foo
