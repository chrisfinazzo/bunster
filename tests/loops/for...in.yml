cases:
  - name: "simple `for` loop"
    args: ["foo", "bar", "baz"]
    script: |
      # over positional
      for arg; do
        echo positional: $arg
      done

      for arg in boo boz fee; do
        echo inline: $arg
      done
    expect:
      stdout: |
        positional: foo
        positional: bar
        positional: baz
        inline: boo
        inline: boz
        inline: fee

  - name: "redirections on the `for` loop"
    args: ["foo", "bar", "baz"]
    script: |
      for arg; do
          cat
          echo error >&2
          echo alternative output >&3
      done <<<"Hello World" >output.txt 2>error.txt 3>alternate.txt
    expect:
      files:
        output.txt: "Hello World\n"
        error.txt: |
          error
          error
          error
        alternate.txt: |
          alternative output
          alternative output
          alternative output

  - name: "`for` loop within pipeline"
    args: ["foo", "bar", "baz"]
    script: |
      for arg; do
        echo positional: $arg
      done   |  cat

      for arg in boo boz fee; do
          echo inline: $arg
          cat
      done |  cat
    expect:
      stdout: |
        positional: foo
        positional: bar
        positional: baz
        inline: boo
        inline: boz
        inline: fee

  - name: "`for` loop within list"
    args: ["foo", "bar", "baz"]
    script: |
      for arg; do
        echo positional: $arg
      done   &&

        for arg in boo boz fee; do
          echo inline: $arg
        done
    expect:
      stdout: |
        positional: foo
        positional: bar
        positional: baz
        inline: boo
        inline: boz
        inline: fee

  - name: "break within `for` loop"
    args: ["foo", "bar", "baz"]
    script: |
      for arg; do
        echo before 1
        break
        echo after 1
      done

      for arg in foo bar baz; do
        echo before 2
        break
        echo after 2
      done
    expect:
      stdout: |
        before 1
        before 2

  - name: "continue within `for` loop"
    args: ["foo", "bar", "baz"]
    script: |
      for arg; do
        echo before 1
        continue
        echo after 1
      done

      for arg in foo bar baz; do
        echo before 2
        continue
        echo after 2
      done
    expect:
      stdout: |
        before 1
        before 1
        before 1
        before 2
        before 2
        before 2

  - name: "`break`  can be nested in if statements within `for` loops"
    script: |
      for i in a b c; do
        echo foo
        if true; then
          break
        fi
        echo bar
      done

      for i in a b c; do
        echo baz
        if true; then
          if true; then 
            if true; then
              break
            fi
          fi
        fi
        echo boo
      done

      for i in a b c; do
          if false; then 
            echo bee
            break
          fi

          if true; then
            break
          fi
        echo boo
      done
    expect:
      stdout: |
        foo
        baz

  - name: "`break`  can be nested in case statements within `for` loops"
    script: |
      for i in a b c; do
        echo foo
        
        case foo in
          *) break
        esac
        
        echo bar
      done

      for i in a b c; do
        echo baz
        
        case foo in
          *) case foo in
            *) 
            case foo in
              *) break
            esac
          esac
        esac
        
        echo boo
      done

      for i in a b c; do
          case foo in
            bar)
              echo bee
              break
            ;;
          esac

          case foo in
            *) break
          esac
        echo boo
      done
    expect:
      stdout: |
        foo
        baz

  - name: "`continue`  can be nested in if statements within `for` loops"
    script: |
      for i in a b c; do
        echo foo
        if true; then
          continue
        fi
        echo bar
      done

      echo

      for i in a b c; do
        echo baz
        if true; then
          if true; then 
            if true; then
              continue
            fi
          fi
        fi
        echo boo
      done

      echo

      for i in a b c; do
          if false; then 
            echo bee
            continue
          fi

          echo boo
          if true; then
            continue
          fi
        echo boo
      done
    expect:
      stdout: |
        foo
        foo
        foo

        baz
        baz
        baz

        boo
        boo
        boo

  - name: "`continue`  can be nested in case statements within `for` loops"
    script: |
      for i in a b c; do
        echo foo
        
        case foo in
          *) continue
        esac
        
        echo bar
      done

      echo

      for i in a b c; do
        echo baz
        
        case foo in
          *) case foo in
            *) case foo in
              *) continue
            esac
          esac
        esac
        
        echo boo
      done

      echo

      for i in a b c; do
        case foo in
          bar)
            echo bee
            continue
          ;;
        esac

        echo boo

        case foo in
          *) continue
        esac

        echo boo
      done
    expect:
      stdout: |
        foo
        foo
        foo

        baz
        baz
        baz

        boo
        boo
        boo
