---
cases:
  - name: "`>` output redirection"
    files:
      "output2.txt": "foobar"
    script: |
      # file is created if missing
      echo foo bar >output.txt

      # file is truncated if it exists
      echo hello world >output2.txt

      # standard output is not redirected
      cat non-existing-file >output3.txt
    expect:
      exit_code: 1
      stderr: "cat: non-existing-file: No such file or directory\n"
      files:
        "output.txt": "foo bar\n"
        "output2.txt": "hello world\n"
        "output3.txt": ""

  - name: "`>|` output redirection"
    files:
      "output2.txt": "foobar"
    script: |
      # file is created if missing
      echo foo bar >|output.txt

      # file is truncated if it exists
      echo hello world >|output2.txt

      # standard output is not redirected
      cat non-existing-file >|output3.txt
    expect:
      exit_code: 1
      stderr: "cat: non-existing-file: No such file or directory\n"
      files:
        "output.txt": "foo bar\n"
        "output2.txt": "hello world\n"
        "output3.txt": ""

  - name: "`>>` append redirection"
    script: |
      # file is created if missing
      echo hello >>output.txt

      # content is appended
      echo world >>output.txt

      # standard output is not redirected
      cat non-existing-file >>output.txt
    expect:
      exit_code: 1
      stderr: "cat: non-existing-file: No such file or directory\n"
      files:
        "output.txt": |
          hello
          world

  - name: "`&>` all output redirection"
    files:
      "all2.txt": "foobar"
    script: |
      # file is created if missing
      echo foo bar &>all.txt

      # file is truncated if it exists
      echo hello world &>all2.txt

      # standard output redirected too
      cat non-existing-file &>all3.txt
    expect:
      exit_code: 1
      files:
        "all.txt": "foo bar\n"
        "all2.txt": "hello world\n"
        "all3.txt": "cat: non-existing-file: No such file or directory\n"

  - name: "`&>>` all output append redirection"
    script: |
      # file is created if missing
      echo hello &>>all.txt

      # content is appended
      echo world &>>all.txt

      # standard output redirected too
      cat non-existing-file &>>all.txt
    expect:
      exit_code: 1
      files:
        "all.txt": |
          hello
          world
          cat: non-existing-file: No such file or directory

  - name: "`<` input redirection"
    files:
      "input.txt": "hello world"
    script: |
      cat <input.txt
    expect:
      stdout: "hello world"
      files:
        "input.txt": "hello world"

  - name: "`>&` file descriptor duplication"
    script: |
      # duplicate the standard io
      echo 'redirected to stderr' >&2

      # duplicate an open file
      echo 'Hello World' 3>file.txt >&3

      # redundant duplication
      echo 'redundant duplication of stdout' 3>&1 4>&3 1>&4
    expect:
      stdout: "redundant duplication of stdout\n"
      stderr: "redirected to stderr\n"
      files:
        "file.txt": "Hello World\n"

  - name: "`<&` file descriptor duplication"
    files:
      "file.txt": "Hello World"
    script: |
      # duplicate the standard io
      cat 3<<<'foobar' <&3

      # duplicate an open file
      cat 3<file.txt <&3

      # redundant duplication
      cat 3<file.txt 4<&3 0<&4
    expect:
      stdout: "foobar\nHello WorldHello World"
      files:
        "file.txt": "Hello World"

  - name: "`<>` open file for reading and writing"
    files:
      "file.txt": "Hello World"
    script: |
      # read from
      cat <>file.txt

      # write to
      cat <<<foobar 3<>file.txt >&3
    expect:
      stdout: "Hello World"
      files:
        "file.txt": "foobar\norld" # the 'W' character was removed because the content was overriden without truncation

  - name: "closing open file descriptors"
    script: |
      # read from
      cat 3<<<foo 4<&3- <&4 4<&-
    expect:
      stdout: "foo\n"

  - name: "cannot write to a file open for reading, and vise-versa"
    runs_on: linux
    files:
      "file.txt": "Hello World"
    script: |
      # file open for reading only.
      echo foobar 3<file.txt >&3

      # here string is only intended for reading only.
      echo foobar 3<<<foobar >&3

      # file open for writing only.
      cat 3>file2.txt <&3

      # file open for appending only.
      cat 3>>file2.txt <&3

      # file open for writing only.
      cat 3>|file2.txt <&3
    expect:
      exit_code: 1
      stderr: |
        echo: write error: Bad file descriptor
        echo: write error: Bad file descriptor
        cat: -: Bad file descriptor
        cat: -: Bad file descriptor
        cat: -: Bad file descriptor
      files:
        "file.txt": "Hello World"
        "file2.txt": ""

  - name: "cannot write to a file open for reading, and vise-versa"
    runs_on: darwin
    files:
      "file.txt": "Hello World"
    script: |
      # file open for reading only.
      echo foobar 3<file.txt >&3

      # here string is only intended for reading only.
      echo foobar 3<<<foobar >&3

      # file open for writing only.
      cat 3>file2.txt <&3

      # file open for appending only.
      cat 3>>file2.txt <&3

      # file open for writing only.
      cat 3>|file2.txt <&3
    expect:
      exit_code: 1
      stderr: |
        echo: fflush: Bad file descriptor
        echo: fflush: Bad file descriptor
        cat: stdin: Bad file descriptor
        cat: stdin: Bad file descriptor
        cat: stdin: Bad file descriptor
      files:
        "file.txt": "Hello World"
        "file2.txt": ""

  - name: "cannot duplicate a bad file descriptor"
    runs_on: linux
    script: |
      # file open and closed
      echo helloworld 3>file.txt 3>&- >&3

      # file open and closed (second syntax)
      echo helloworld 3>file.txt 3<&- >&3

      # stdout is closed
      echo helloworld >&- 3<&1

      # stdout is duplicated and closed
      echo helloworld 3>&1- 4>&1

      # duplicating a non open file descriptor
      echo helloworld >&3
      echo helloworld <&3

      # duplicating a closed piped-stream
      grep foo 3<<<foobar 3>&- <&3

      # closing a file descriptor is not an issue until it is used
      true <&- >&- 2>&-
    expect:
      exit_code: 0
      stderr: |
        echo: write error: Bad file descriptor
        echo: write error: Bad file descriptor
        echo: write error: Bad file descriptor
        echo: write error: Bad file descriptor
        trying to duplicate bad file descriptor: 3
        trying to duplicate bad file descriptor: 3
        grep: (standard input): Bad file descriptor
      files:
        "file.txt": ""

  - name: "cannot duplicate a bad file descriptor"
    runs_on: darwin
    script: |
      # file open and closed
      echo helloworld 3>file.txt 3>&- >&3

      # file open and closed (second syntax)
      echo helloworld 3>file.txt 3<&- >&3

      # stdout is closed
      echo helloworld >&- 3<&1

      # stdout is duplicated and closed
      echo helloworld 3>&1- 4>&1

      # duplicating a non open file descriptor
      echo helloworld >&3
      echo helloworld <&3

      # duplicating a closed piped-stream
      grep foo 3<<<foobar 3>&- <&3

      # closing a file descriptor is not an issue until it is used
      true <&- >&- 2>&-
    expect:
      exit_code: 0
      stderr: |
        echo: fflush: Bad file descriptor
        echo: fflush: Bad file descriptor
        echo: fflush: Bad file descriptor
        echo: fflush: Bad file descriptor
        trying to duplicate bad file descriptor: 3
        trying to duplicate bad file descriptor: 3
        grep: (standard input): Bad file descriptor
      files:
        "file.txt": ""

  - name: "file-system errors are handled"
    runs_on: linux
    script: |
      # file doesn't exists'
      cat <file.txt

      cat >dir/file.txt
    expect:
      exit_code: 1
      stderr: |
        "/tmp/bunster-testing/run/file.txt": no such file or directory
        "/tmp/bunster-testing/run/dir/file.txt": no such file or directory

  - name: "stdio files are treated specially"
    stdin: "direct-from-stdin\n"
    script: |
      # direct read-write
      echo direct-to-stdout >/dev/stdout
      echo direct-to-stderr >/dev/stderr
      cat </dev/stdin

      # the global stdio is not affected.
      echo foobar
      echo foobar >&2
      cat
    expect:
      stderr: |
        direct-to-stderr
        foobar
      stdout: |
        direct-to-stdout
        direct-from-stdin
        foobar

  - name: "shell errors can also be redirected"
    runs_on: linux
    script: |
      # This error is thrown by the shell, not the command itself
      cat 2>error.txt <non-existing-file.txt
    expect:
      exit_code: 1
      files:
        error.txt: |
          "/tmp/bunster-testing/run/non-existing-file.txt": no such file or directory
