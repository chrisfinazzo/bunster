#(TEST: simple group)

{
    echo foo
    echo bar
}

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		func() {
			var commandName = "echo"
			var arguments []string
			arguments = append(arguments, "foo")
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			if stream, err := streamManager.Get("0"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdin = stream
			}
			if stream, err := streamManager.Get("1"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdout = stream
			}
			if stream, err := streamManager.Get("2"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stderr = stream
			}
			if err := command.Run(); err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			shell.ExitCode = command.ExitCode

		}()
		func() {
			var commandName = "echo"
			var arguments []string
			arguments = append(arguments, "bar")
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			if stream, err := streamManager.Get("0"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdin = stream
			}
			if stream, err := streamManager.Get("1"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdout = stream
			}
			if stream, err := streamManager.Get("2"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stderr = stream
			}
			if err := command.Run(); err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			shell.ExitCode = command.ExitCode

		}()

	}()
}

#(ENDTEST)



#(TEST: redirections on groups)

{
    echo foo
    echo bar
} >output.txt <input.txt

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		stream0, err := streamManager.OpenStream("output.txt", runtime.STREAM_FLAG_WRITE)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("1", stream0)
		stream1, err := streamManager.OpenStream("input.txt", runtime.STREAM_FLAG_READ)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("0", stream1)
		func() {
			var commandName = "echo"
			var arguments []string
			arguments = append(arguments, "foo")
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			if stream, err := streamManager.Get("0"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdin = stream
			}
			if stream, err := streamManager.Get("1"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdout = stream
			}
			if stream, err := streamManager.Get("2"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stderr = stream
			}
			if err := command.Run(); err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			shell.ExitCode = command.ExitCode

		}()
		func() {
			var commandName = "echo"
			var arguments []string
			arguments = append(arguments, "bar")
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			if stream, err := streamManager.Get("0"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdin = stream
			}
			if stream, err := streamManager.Get("1"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdout = stream
			}
			if stream, err := streamManager.Get("2"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stderr = stream
			}
			if err := command.Run(); err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			shell.ExitCode = command.ExitCode

		}()

	}()
}

#(ENDTEST)



#(TEST: groups containing piplines and lists)

{
    echo foo | cat \
    && echo bar | cat
}

#(RESULT)


package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		func() {
			var pipelineWaitgroup []func() int
			pipeReader1, pipeWriter1, err := runtime.NewPipe()
			if err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			func() {
				streamManager := streamManager.Clone()
				streamManager.Add("1", pipeWriter1)
				shell := shell.Clone()
				var done = make(chan struct{}, 1)
				pipelineWaitgroup = append(pipelineWaitgroup, func() int {
					<-done
					shell.Terminate(streamManager)
					streamManager.Destroy()
					return shell.ExitCode
				})
				go func() {
					defer func() { done <- struct{}{} }()
					func() {
						var commandName = "echo"
						var arguments []string
						arguments = append(arguments, "foo")
						var command = shell.Command(commandName, arguments...)
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						if stream, err := streamManager.Get("0"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stdin = stream
						}
						if stream, err := streamManager.Get("1"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stdout = stream
						}
						if stream, err := streamManager.Get("2"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stderr = stream
						}
						if err := command.Run(); err != nil {
							shell.HandleError(streamManager, err)
							return
						}
						shell.ExitCode = command.ExitCode

					}()

				}()

			}()
			func() {
				streamManager := streamManager.Clone()
				streamManager.Add("0", pipeReader1)
				shell := shell.Clone()
				var done = make(chan struct{}, 1)
				pipelineWaitgroup = append(pipelineWaitgroup, func() int {
					<-done
					shell.Terminate(streamManager)
					streamManager.Destroy()
					return shell.ExitCode
				})
				go func() {
					defer func() { done <- struct{}{} }()
					func() {
						var commandName = "cat"
						var arguments []string
						var command = shell.Command(commandName, arguments...)
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						if stream, err := streamManager.Get("0"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stdin = stream
						}
						if stream, err := streamManager.Get("1"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stdout = stream
						}
						if stream, err := streamManager.Get("2"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stderr = stream
						}
						if err := command.Run(); err != nil {
							shell.HandleError(streamManager, err)
							return
						}
						shell.ExitCode = command.ExitCode

					}()

				}()

			}()
			for _, wait := range pipelineWaitgroup {
				shell.ExitCode = wait()
			}

		}()
		if shell.ExitCode == 0 {
			func() {
				var pipelineWaitgroup []func() int
				pipeReader1, pipeWriter1, err := runtime.NewPipe()
				if err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				func() {
					streamManager := streamManager.Clone()
					streamManager.Add("1", pipeWriter1)
					shell := shell.Clone()
					var done = make(chan struct{}, 1)
					pipelineWaitgroup = append(pipelineWaitgroup, func() int {
						<-done
						shell.Terminate(streamManager)
						streamManager.Destroy()
						return shell.ExitCode
					})
					go func() {
						defer func() { done <- struct{}{} }()
						func() {
							var commandName = "echo"
							var arguments []string
							arguments = append(arguments, "bar")
							var command = shell.Command(commandName, arguments...)
							streamManager := streamManager.Clone()
							defer streamManager.Destroy()
							if stream, err := streamManager.Get("0"); err != nil {
								shell.HandleError(streamManager, err)
								return
							} else {
								command.Stdin = stream
							}
							if stream, err := streamManager.Get("1"); err != nil {
								shell.HandleError(streamManager, err)
								return
							} else {
								command.Stdout = stream
							}
							if stream, err := streamManager.Get("2"); err != nil {
								shell.HandleError(streamManager, err)
								return
							} else {
								command.Stderr = stream
							}
							if err := command.Run(); err != nil {
								shell.HandleError(streamManager, err)
								return
							}
							shell.ExitCode = command.ExitCode

						}()

					}()

				}()
				func() {
					streamManager := streamManager.Clone()
					streamManager.Add("0", pipeReader1)
					shell := shell.Clone()
					var done = make(chan struct{}, 1)
					pipelineWaitgroup = append(pipelineWaitgroup, func() int {
						<-done
						shell.Terminate(streamManager)
						streamManager.Destroy()
						return shell.ExitCode
					})
					go func() {
						defer func() { done <- struct{}{} }()
						func() {
							var commandName = "cat"
							var arguments []string
							var command = shell.Command(commandName, arguments...)
							streamManager := streamManager.Clone()
							defer streamManager.Destroy()
							if stream, err := streamManager.Get("0"); err != nil {
								shell.HandleError(streamManager, err)
								return
							} else {
								command.Stdin = stream
							}
							if stream, err := streamManager.Get("1"); err != nil {
								shell.HandleError(streamManager, err)
								return
							} else {
								command.Stdout = stream
							}
							if stream, err := streamManager.Get("2"); err != nil {
								shell.HandleError(streamManager, err)
								return
							} else {
								command.Stderr = stream
							}
							if err := command.Run(); err != nil {
								shell.HandleError(streamManager, err)
								return
							}
							shell.ExitCode = command.ExitCode

						}()

					}()

				}()
				for _, wait := range pipelineWaitgroup {
					shell.ExitCode = wait()
				}

			}()

		}

	}()
}

#(ENDTEST)



#(TEST: nested groups)

{
    {
        echo foo
    }

     {
        echo bar
    }
}

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			func() {
				var commandName = "echo"
				var arguments []string
				arguments = append(arguments, "foo")
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()

		}()
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			func() {
				var commandName = "echo"
				var arguments []string
				arguments = append(arguments, "bar")
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()

		}()

	}()
}

#(ENDTEST)


