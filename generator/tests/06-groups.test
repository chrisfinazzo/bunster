#(TEST: simple group)

{
    echo foo
    echo bar
}

#(RESULT)

package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	func() {
		streamManager := streamManager.Clone()
		func() {
			var commandName = `echo`
			var arguments []string
			arguments = append(arguments, `foo`)
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			if stream, err := streamManager.Get(`0`); err != nil {
				shell.HandleError(err)
			} else {
				command.Stdin = stream
			}
			if stream, err := streamManager.Get(`1`); err != nil {
				shell.HandleError(err)
			} else {
				command.Stdout = stream
			}
			if stream, err := streamManager.Get(`2`); err != nil {
				shell.HandleError(err)
			} else {
				command.Stderr = stream
			}
			if err := command.Run(); err != nil {
				shell.HandleError(err)
				return
			}
			shell.ExitCode = command.ProcessState.ExitCode()

		}()
		func() {
			var commandName = `echo`
			var arguments []string
			arguments = append(arguments, `bar`)
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			if stream, err := streamManager.Get(`0`); err != nil {
				shell.HandleError(err)
			} else {
				command.Stdin = stream
			}
			if stream, err := streamManager.Get(`1`); err != nil {
				shell.HandleError(err)
			} else {
				command.Stdout = stream
			}
			if stream, err := streamManager.Get(`2`); err != nil {
				shell.HandleError(err)
			} else {
				command.Stderr = stream
			}
			if err := command.Run(); err != nil {
				shell.HandleError(err)
				return
			}
			shell.ExitCode = command.ProcessState.ExitCode()

		}()

	}()
}

#(ENDTEST)



#(TEST: redirections on groups)

{
    echo foo
    echo bar
} >output.txt <input.txt

#(RESULT)

package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	func() {
		streamManager := streamManager.Clone()
		group_file_0, err := streamManager.OpenStream(`output.txt`, runtime.STREAM_FLAG_WRITE)
		if err != nil {
			shell.HandleError(err)
			return
		}
		streamManager.Add(`1`, group_file_0)
		group_file_1, err := streamManager.OpenStream(`input.txt`, runtime.STREAM_FLAG_READ)
		if err != nil {
			shell.HandleError(err)
			return
		}
		streamManager.Add(`0`, group_file_1)
		func() {
			var commandName = `echo`
			var arguments []string
			arguments = append(arguments, `foo`)
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			if stream, err := streamManager.Get(`0`); err != nil {
				shell.HandleError(err)
			} else {
				command.Stdin = stream
			}
			if stream, err := streamManager.Get(`1`); err != nil {
				shell.HandleError(err)
			} else {
				command.Stdout = stream
			}
			if stream, err := streamManager.Get(`2`); err != nil {
				shell.HandleError(err)
			} else {
				command.Stderr = stream
			}
			if err := command.Run(); err != nil {
				shell.HandleError(err)
				return
			}
			shell.ExitCode = command.ProcessState.ExitCode()

		}()
		func() {
			var commandName = `echo`
			var arguments []string
			arguments = append(arguments, `bar`)
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			if stream, err := streamManager.Get(`0`); err != nil {
				shell.HandleError(err)
			} else {
				command.Stdin = stream
			}
			if stream, err := streamManager.Get(`1`); err != nil {
				shell.HandleError(err)
			} else {
				command.Stdout = stream
			}
			if stream, err := streamManager.Get(`2`); err != nil {
				shell.HandleError(err)
			} else {
				command.Stderr = stream
			}
			if err := command.Run(); err != nil {
				shell.HandleError(err)
				return
			}
			shell.ExitCode = command.ProcessState.ExitCode()

		}()

	}()
}

#(ENDTEST)



#(TEST: groups containing piplines and lists)

{
    echo foo | cat \
    && echo bar | cat
}

#(RESULT)
package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	func() {
		streamManager := streamManager.Clone()
		func() {
			var pipelineWaitgroup runtime.PiplineWaitgroup
			pipeReader1, pipeWriter1, err := runtime.NewPipe()
			if err != nil {
				shell.HandleError(err)
				return
			}
			func() {
				var commandName = `echo`
				var arguments []string
				arguments = append(arguments, `foo`)
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				streamManager.Add(`1`, pipeWriter1)
				if stream, err := streamManager.Get(`0`); err != nil {
					shell.HandleError(err)
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get(`1`); err != nil {
					shell.HandleError(err)
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get(`2`); err != nil {
					shell.HandleError(err)
				} else {
					command.Stderr = stream
				}
				if err := command.Start(); err != nil {
					shell.HandleError(err)
					return
				}
				pipelineWaitgroup = append(pipelineWaitgroup, runtime.PiplineWaitgroupItem{
					Wait: command.Wait,
				})
			}()
			func() {
				var commandName = `cat`
				var arguments []string
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				streamManager.Add(`0`, pipeReader1)
				if stream, err := streamManager.Get(`0`); err != nil {
					shell.HandleError(err)
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get(`1`); err != nil {
					shell.HandleError(err)
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get(`2`); err != nil {
					shell.HandleError(err)
				} else {
					command.Stderr = stream
				}
				if err := command.Start(); err != nil {
					shell.HandleError(err)
					return
				}
				pipelineWaitgroup = append(pipelineWaitgroup, runtime.PiplineWaitgroupItem{
					Wait: command.Wait,
				})
			}()
			for i, item := range pipelineWaitgroup {
				if err := item.Wait(); err != nil {
					shell.HandleError(err)
				}
				if i < (len(pipelineWaitgroup) - 1) {
					shell.ExitCode = 0
				}
			}

		}()
		if shell.ExitCode == 0 {
			func() {
				var pipelineWaitgroup runtime.PiplineWaitgroup
				pipeReader1, pipeWriter1, err := runtime.NewPipe()
				if err != nil {
					shell.HandleError(err)
					return
				}
				func() {
					var commandName = `echo`
					var arguments []string
					arguments = append(arguments, `bar`)
					var command = shell.Command(commandName, arguments...)
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					streamManager.Add(`1`, pipeWriter1)
					if stream, err := streamManager.Get(`0`); err != nil {
						shell.HandleError(err)
					} else {
						command.Stdin = stream
					}
					if stream, err := streamManager.Get(`1`); err != nil {
						shell.HandleError(err)
					} else {
						command.Stdout = stream
					}
					if stream, err := streamManager.Get(`2`); err != nil {
						shell.HandleError(err)
					} else {
						command.Stderr = stream
					}
					if err := command.Start(); err != nil {
						shell.HandleError(err)
						return
					}
					pipelineWaitgroup = append(pipelineWaitgroup, runtime.PiplineWaitgroupItem{
						Wait: command.Wait,
					})
				}()
				func() {
					var commandName = `cat`
					var arguments []string
					var command = shell.Command(commandName, arguments...)
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					streamManager.Add(`0`, pipeReader1)
					if stream, err := streamManager.Get(`0`); err != nil {
						shell.HandleError(err)
					} else {
						command.Stdin = stream
					}
					if stream, err := streamManager.Get(`1`); err != nil {
						shell.HandleError(err)
					} else {
						command.Stdout = stream
					}
					if stream, err := streamManager.Get(`2`); err != nil {
						shell.HandleError(err)
					} else {
						command.Stderr = stream
					}
					if err := command.Start(); err != nil {
						shell.HandleError(err)
						return
					}
					pipelineWaitgroup = append(pipelineWaitgroup, runtime.PiplineWaitgroupItem{
						Wait: command.Wait,
					})
				}()
				for i, item := range pipelineWaitgroup {
					if err := item.Wait(); err != nil {
						shell.HandleError(err)
					}
					if i < (len(pipelineWaitgroup) - 1) {
						shell.ExitCode = 0
					}
				}

			}()

		}

	}()
}

#(ENDTEST)



#(TEST: nested groups)

{
    {
        echo foo
    }

     {
        echo bar
    }
}

#(RESULT)

package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	func() {
		streamManager := streamManager.Clone()
		func() {
			streamManager := streamManager.Clone()
			func() {
				var commandName = `echo`
				var arguments []string
				arguments = append(arguments, `foo`)
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get(`0`); err != nil {
					shell.HandleError(err)
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get(`1`); err != nil {
					shell.HandleError(err)
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get(`2`); err != nil {
					shell.HandleError(err)
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(err)
					return
				}
				shell.ExitCode = command.ProcessState.ExitCode()

			}()

		}()
		func() {
			streamManager := streamManager.Clone()
			func() {
				var commandName = `echo`
				var arguments []string
				arguments = append(arguments, `bar`)
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get(`0`); err != nil {
					shell.HandleError(err)
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get(`1`); err != nil {
					shell.HandleError(err)
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get(`2`); err != nil {
					shell.HandleError(err)
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(err)
					return
				}
				shell.ExitCode = command.ProcessState.ExitCode()

			}()

		}()

	}()
}

#(ENDTEST)



#(TEST: nested groups)

{ echo foo;  } | { cat;  }

#(RESULT)

package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	func() {
		var pipelineWaitgroup runtime.PiplineWaitgroup
		pipeReader1, pipeWriter1, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(err)
			return
		}
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add(`1`, pipeWriter1)
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, runtime.PiplineWaitgroupItem{
				Wait: func() error {
					<-done
					return nil
				},
			})
			go func() {
				defer streamManager.Destroy()
				func() {
					var commandName = `echo`
					var arguments []string
					arguments = append(arguments, `foo`)
					var command = shell.Command(commandName, arguments...)
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					if stream, err := streamManager.Get(`0`); err != nil {
						shell.HandleError(err)
					} else {
						command.Stdin = stream
					}
					if stream, err := streamManager.Get(`1`); err != nil {
						shell.HandleError(err)
					} else {
						command.Stdout = stream
					}
					if stream, err := streamManager.Get(`2`); err != nil {
						shell.HandleError(err)
					} else {
						command.Stderr = stream
					}
					if err := command.Run(); err != nil {
						shell.HandleError(err)
						return
					}
					shell.ExitCode = command.ProcessState.ExitCode()

				}()
				done <- struct{}{}

			}()

		}()
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add(`0`, pipeReader1)
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, runtime.PiplineWaitgroupItem{
				Wait: func() error {
					<-done
					return nil
				},
			})
			go func() {
				defer streamManager.Destroy()
				func() {
					var commandName = `cat`
					var arguments []string
					var command = shell.Command(commandName, arguments...)
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					if stream, err := streamManager.Get(`0`); err != nil {
						shell.HandleError(err)
					} else {
						command.Stdin = stream
					}
					if stream, err := streamManager.Get(`1`); err != nil {
						shell.HandleError(err)
					} else {
						command.Stdout = stream
					}
					if stream, err := streamManager.Get(`2`); err != nil {
						shell.HandleError(err)
					} else {
						command.Stderr = stream
					}
					if err := command.Run(); err != nil {
						shell.HandleError(err)
						return
					}
					shell.ExitCode = command.ProcessState.ExitCode()

				}()
				done <- struct{}{}

			}()

		}()
		for i, item := range pipelineWaitgroup {
			if err := item.Wait(); err != nil {
				shell.HandleError(err)
			}
			if i < (len(pipelineWaitgroup) - 1) {
				shell.ExitCode = 0
			}
		}

	}()
}

#(ENDTEST)
