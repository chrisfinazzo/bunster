#(TEST: simple pipeline)

cat file.txt | grep foobar

#(RESULT)
package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	func() {
		var pipelineWaitgroup []func() error
		pipeReader1, pipeWriter1, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(err)
			return
		}
		func() {
			var commandName = `cat`
			var arguments []string
			arguments = append(arguments, `file.txt`)
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add(`1`, pipeWriter1, true)
			if stream, err := streamManager.Get(`0`); err != nil {
            shell.HandleError(err)
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get(`1`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get(`2`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stderr = stream
            }
			if err := command.Start(); err != nil {
				shell.HandleError(err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
			     defer streamManager.Destroy()
			     return command.Wait()
			})

		}()
		func() {
			var commandName = `grep`
			var arguments []string
			arguments = append(arguments, `foobar`)
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add(`0`, pipeReader1, false)
			if stream, err := streamManager.Get(`0`); err != nil {
            shell.HandleError(err)
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get(`1`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get(`2`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stderr = stream
            }
			if err := command.Start(); err != nil {
				shell.HandleError(err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
			     defer streamManager.Destroy()
			     return command.Wait()
			})

		}()
		for i, wait := range pipelineWaitgroup {
			if err := wait(); err != nil {
				shell.HandleError(err)
			}
			if i < (len(pipelineWaitgroup) - 1) {
				shell.ExitCode = 0
			}
		}

	}()
}

#(ENDTEST)


#(TEST: longer pipeline)

cat file.txt |
    grep foobar |
    strep "[o]+" "o" |
    strjoin ', '

#(RESULT)
package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	func() {
		var pipelineWaitgroup []func() error
		pipeReader1, pipeWriter1, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(err)
			return
		}
		func() {
			var commandName = `cat`
			var arguments []string
			arguments = append(arguments, `file.txt`)
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add(`1`, pipeWriter1, true)
			if stream, err := streamManager.Get(`0`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get(`1`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get(`2`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stderr = stream
            }
			if err := command.Start(); err != nil {
				shell.HandleError(err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
			     defer streamManager.Destroy()
			     return command.Wait()
			})

		}()
		pipeReader2, pipeWriter2, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(err)
			return
		}
		func() {
			var commandName = `grep`
			var arguments []string
			arguments = append(arguments, `foobar`)
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add(`1`, pipeWriter2, true)
			streamManager.Add(`0`, pipeReader1, false)
			if stream, err := streamManager.Get(`0`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get(`1`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get(`2`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stderr = stream
            }
			if err := command.Start(); err != nil {
				shell.HandleError(err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
			     defer streamManager.Destroy()
			     return command.Wait()
			})

		}()
		pipeReader3, pipeWriter3, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(err)
			return
		}
		func() {
    		var commandName = `strep`
    		var arguments []string
            arguments = append(arguments, `[o]+`)
            arguments = append(arguments, `o`)
    		var command = shell.Command(commandName, arguments...)
    		streamManager := streamManager.Clone()
    		streamManager.Add(`1`, pipeWriter3, true)
			streamManager.Add(`0`, pipeReader2, false)
        	if stream, err := streamManager.Get(`0`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get(`1`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get(`2`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stderr = stream
            }
    		if err := command.Start(); err != nil {
    			shell.HandleError(err)
    			return
    		}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
			     defer streamManager.Destroy()
			     return command.Wait()
			})

		}()
			func() {
			var commandName = `strjoin`
			var arguments []string
			arguments = append(arguments, `, `)
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add(`0`, pipeReader3, false)
			if stream, err := streamManager.Get(`0`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get(`1`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get(`2`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stderr = stream
            }
			if err := command.Start(); err != nil {
				shell.HandleError(err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
			     defer streamManager.Destroy()
			     return command.Wait()
			})

		}()
		for i, wait := range pipelineWaitgroup {
			if err := wait(); err != nil {
				shell.HandleError(err)
			}
			if i < (len(pipelineWaitgroup) - 1) {
				shell.ExitCode = 0
			}
		}

	}()
}

#(ENDTEST)


#(TEST: pipeline that redirects stderr as well)
cat file.txt |& grep foobar
#(RESULT)
package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	func() {
		var pipelineWaitgroup []func() error
		pipeReader1, pipeWriter1, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(err)
			return
		}
		func() {
			var commandName = `cat`
			var arguments []string
			arguments = append(arguments, `file.txt`)
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add(`1`, pipeWriter1, true)
			streamManager.Add(`2`, pipeWriter1, true)
			if stream, err := streamManager.Get(`0`); err != nil {
            shell.HandleError(err)
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get(`1`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get(`2`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stderr = stream
            }
			if err := command.Start(); err != nil {
				shell.HandleError(err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
			     defer streamManager.Destroy()
			     return command.Wait()
			})

		}()
		func() {
			var commandName = `grep`
			var arguments []string
			arguments = append(arguments, `foobar`)
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add(`0`, pipeReader1, false)
			if stream, err := streamManager.Get(`0`); err != nil {
            shell.HandleError(err)
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get(`1`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get(`2`); err != nil {
                shell.HandleError(err)
            } else {
                command.Stderr = stream
            }
			if err := command.Start(); err != nil {
				shell.HandleError(err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
			     defer streamManager.Destroy()
			     return command.Wait()
			})

		}()
		for i, wait := range pipelineWaitgroup {
			if err := wait(); err != nil {
				shell.HandleError(err)
			}
			if i < (len(pipelineWaitgroup) - 1) {
				shell.ExitCode = 0
			}
		}

	}()
}

#(ENDTEST)
