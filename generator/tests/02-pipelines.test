#(TEST: simple pipeline)

cat file.txt | grep foobar

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		var pipelineWaitgroup []func() int
		pipeReader1, pipeWriter1, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add("1", pipeWriter1)
			shell := shell.Clone()
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, func() int {
				<-done
				shell.Terminate(streamManager)
				streamManager.Destroy()
				return shell.ExitCode
			})
			go func() {
				defer func() { done <- struct{}{} }()
				func() {
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					var commandName = "cat"
					var arguments []string
					var env = make(map[string]string)
					arguments = append(arguments, "file.txt")
					if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
						shell.HandleError(streamManager, err, "main.sh(2:1)")
						return
					}

				}()

			}()

		}()
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add("0", pipeReader1)
			shell := shell.Clone()
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, func() int {
				<-done
				shell.Terminate(streamManager)
				streamManager.Destroy()
				return shell.ExitCode
			})
			go func() {
				defer func() { done <- struct{}{} }()
				func() {
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					var commandName = "grep"
					var arguments []string
					var env = make(map[string]string)
					arguments = append(arguments, "foobar")
					if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
						shell.HandleError(streamManager, err, "main.sh(2:16)")
						return
					}

				}()

			}()

		}()
		for _, wait := range pipelineWaitgroup {
			shell.ExitCode = wait()
		}

	}()
}


#(ENDTEST)


#(TEST: longer pipeline)

cat file.txt |
    grep foobar |
    strep "[o]+" "o" |
    strjoin ', '

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		var pipelineWaitgroup []func() int
		pipeReader1, pipeWriter1, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add("1", pipeWriter1)
			shell := shell.Clone()
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, func() int {
				<-done
				shell.Terminate(streamManager)
				streamManager.Destroy()
				return shell.ExitCode
			})
			go func() {
				defer func() { done <- struct{}{} }()
				func() {
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					var commandName = "cat"
					var arguments []string
					var env = make(map[string]string)
					arguments = append(arguments, "file.txt")
					if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
						shell.HandleError(streamManager, err, "main.sh(2:1)")
						return
					}

				}()

			}()

		}()
		pipeReader2, pipeWriter2, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add("0", pipeReader1)
			streamManager.Add("1", pipeWriter2)
			shell := shell.Clone()
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, func() int {
				<-done
				shell.Terminate(streamManager)
				streamManager.Destroy()
				return shell.ExitCode
			})
			go func() {
				defer func() { done <- struct{}{} }()
				func() {
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					var commandName = "grep"
					var arguments []string
					var env = make(map[string]string)
					arguments = append(arguments, "foobar")
					if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
						shell.HandleError(streamManager, err, "main.sh(3:5)")
						return
					}

				}()

			}()

		}()
		pipeReader3, pipeWriter3, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add("0", pipeReader2)
			streamManager.Add("1", pipeWriter3)
			shell := shell.Clone()
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, func() int {
				<-done
				shell.Terminate(streamManager)
				streamManager.Destroy()
				return shell.ExitCode
			})
			go func() {
				defer func() { done <- struct{}{} }()
				func() {
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					var commandName = "strep"
					var arguments []string
					var env = make(map[string]string)
					arguments = append(arguments, "[o]+")
					arguments = append(arguments, "o")
					if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
						shell.HandleError(streamManager, err, "main.sh(4:5)")
						return
					}

				}()

			}()

		}()
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add("0", pipeReader3)
			shell := shell.Clone()
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, func() int {
				<-done
				shell.Terminate(streamManager)
				streamManager.Destroy()
				return shell.ExitCode
			})
			go func() {
				defer func() { done <- struct{}{} }()
				func() {
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					var commandName = "strjoin"
					var arguments []string
					var env = make(map[string]string)
					arguments = append(arguments, ", ")
					if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
						shell.HandleError(streamManager, err, "main.sh(5:5)")
						return
					}

				}()

			}()

		}()
		for _, wait := range pipelineWaitgroup {
			shell.ExitCode = wait()
		}

	}()
}


#(ENDTEST)


#(TEST: pipeline that redirects stderr as well)

cat file.txt |& grep foobar

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		var pipelineWaitgroup []func() int
		pipeReader1, pipeWriter1, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add("1", pipeWriter1)
			streamManager.Add("2", pipeWriter1)
			shell := shell.Clone()
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, func() int {
				<-done
				shell.Terminate(streamManager)
				streamManager.Destroy()
				return shell.ExitCode
			})
			go func() {
				defer func() { done <- struct{}{} }()
				func() {
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					var commandName = "cat"
					var arguments []string
					var env = make(map[string]string)
					arguments = append(arguments, "file.txt")
					if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
						shell.HandleError(streamManager, err, "main.sh(2:1)")
						return
					}

				}()

			}()

		}()
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add("0", pipeReader1)
			shell := shell.Clone()
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, func() int {
				<-done
				shell.Terminate(streamManager)
				streamManager.Destroy()
				return shell.ExitCode
			})
			go func() {
				defer func() { done <- struct{}{} }()
				func() {
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					var commandName = "grep"
					var arguments []string
					var env = make(map[string]string)
					arguments = append(arguments, "foobar")
					if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
						shell.HandleError(streamManager, err, "main.sh(2:17)")
						return
					}

				}()

			}()

		}()
		for _, wait := range pipelineWaitgroup {
			shell.ExitCode = wait()
		}

	}()
}


#(ENDTEST)


#(TEST: can invert exit code )

! command

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var commandName = "command"
		var arguments []string
		var env = make(map[string]string)
		if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
			shell.HandleError(streamManager, err, "main.sh(2:3)")
			return
		}

	}()
	if shell.ExitCode == 0 {
		shell.ExitCode = 1
	} else {
		shell.ExitCode = 0
	}
}

#(ENDTEST)



#(TEST: can invert exit code recursivly)

! ! command

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var commandName = "command"
		var arguments []string
		var env = make(map[string]string)
		if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
			shell.HandleError(streamManager, err, "main.sh(2:5)")
			return
		}

	}()
	if shell.ExitCode == 0 {
		shell.ExitCode = 1
	} else {
		shell.ExitCode = 0
	}
	if shell.ExitCode == 0 {
		shell.ExitCode = 1
	} else {
		shell.ExitCode = 0
	}
}


#(ENDTEST)
