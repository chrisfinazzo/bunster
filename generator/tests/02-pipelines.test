#(TEST: simple pipeline)

cat file.txt | grep foobar

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		var pipelineWaitgroup []func() error
		pipeReader1, pipeWriter1, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		func() {
			var commandName = "cat"
			var arguments []string
			arguments = append(arguments, "file.txt")
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add("1", pipeWriter1)
			if stream, err := streamManager.Get("0"); err != nil {
            shell.HandleError(streamManager, err)
            return
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get("1"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get("2"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stderr = stream
            }
			if err := command.Start(); err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
			     defer streamManager.Destroy()
			     return command.Wait()
			})

		}()
		func() {
			var commandName = "grep"
			var arguments []string
			arguments = append(arguments, "foobar")
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add("0", pipeReader1)
			if stream, err := streamManager.Get("0"); err != nil {
            shell.HandleError(streamManager, err)
            return
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get("1"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get("2"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stderr = stream
            }
			if err := command.Start(); err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
			     defer streamManager.Destroy()
			     return command.Wait()
			})

		}()
		for i, wait := range pipelineWaitgroup {
			if err := wait(); err != nil {
				shell.HandleError(streamManager, err)
			}
			if i < (len(pipelineWaitgroup) - 1) {
				shell.ExitCode = 0
			}
		}

	}()
}

#(ENDTEST)


#(TEST: longer pipeline)

cat file.txt |
    grep foobar |
    strep "[o]+" "o" |
    strjoin ', '

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		var pipelineWaitgroup []func() error
		pipeReader1, pipeWriter1, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		func() {
			var commandName = "cat"
			var arguments []string
			arguments = append(arguments, "file.txt")
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add("1", pipeWriter1)
			if stream, err := streamManager.Get("0"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get("1"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get("2"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stderr = stream
            }
			if err := command.Start(); err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
			     defer streamManager.Destroy()
			     return command.Wait()
			})

		}()
		pipeReader2, pipeWriter2, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		func() {
			var commandName = "grep"
			var arguments []string
			arguments = append(arguments, "foobar")
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add("1", pipeWriter2)
			streamManager.Add("0", pipeReader1)
			if stream, err := streamManager.Get("0"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get("1"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get("2"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stderr = stream
            }
			if err := command.Start(); err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
			     defer streamManager.Destroy()
			     return command.Wait()
			})

		}()
		pipeReader3, pipeWriter3, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		func() {
    		var commandName = "strep"
    		var arguments []string
            arguments = append(arguments, "[o]+")
            arguments = append(arguments, "o")
    		var command = shell.Command(commandName, arguments...)
    		streamManager := streamManager.Clone()
    		streamManager.Add("1", pipeWriter3)
			streamManager.Add("0", pipeReader2)
        	if stream, err := streamManager.Get("0"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get("1"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get("2"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stderr = stream
            }
    		if err := command.Start(); err != nil {
    			shell.HandleError(streamManager, err)
    			return
    		}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
			     defer streamManager.Destroy()
			     return command.Wait()
			})

		}()
			func() {
			var commandName = "strjoin"
			var arguments []string
			arguments = append(arguments, ", ")
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add("0", pipeReader3)
			if stream, err := streamManager.Get("0"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get("1"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get("2"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stderr = stream
            }
			if err := command.Start(); err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
			     defer streamManager.Destroy()
			     return command.Wait()
			})

		}()
		for i, wait := range pipelineWaitgroup {
			if err := wait(); err != nil {
				shell.HandleError(streamManager, err)
			}
			if i < (len(pipelineWaitgroup) - 1) {
				shell.ExitCode = 0
			}
		}

	}()
}

#(ENDTEST)


#(TEST: pipeline that redirects stderr as well)
cat file.txt |& grep foobar
#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		var pipelineWaitgroup []func() error
		pipeReader1, pipeWriter1, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		func() {
			var commandName = "cat"
			var arguments []string
			arguments = append(arguments, "file.txt")
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add("1", pipeWriter1)
			streamManager.Add("2", pipeWriter1)
			if stream, err := streamManager.Get("0"); err != nil {
            shell.HandleError(streamManager, err)
            return
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get("1"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get("2"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stderr = stream
            }
			if err := command.Start(); err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
			     defer streamManager.Destroy()
			     return command.Wait()
			})

		}()
		func() {
			var commandName = "grep"
			var arguments []string
			arguments = append(arguments, "foobar")
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add("0", pipeReader1)
			if stream, err := streamManager.Get("0"); err != nil {
            shell.HandleError(streamManager, err)
            return
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get("1"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get("2"); err != nil {
                shell.HandleError(streamManager, err)
                return
            } else {
                command.Stderr = stream
            }
			if err := command.Start(); err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
			     defer streamManager.Destroy()
			     return command.Wait()
			})

		}()
		for i, wait := range pipelineWaitgroup {
			if err := wait(); err != nil {
				shell.HandleError(streamManager, err)
			}
			if i < (len(pipelineWaitgroup) - 1) {
				shell.ExitCode = 0
			}
		}

	}()
}

#(ENDTEST)


#(TEST: can invert exit code )
! command
#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		var commandName = "command"
		var arguments []string
		var command = shell.Command(commandName, arguments...)
		streamManager := streamManager.Clone()
        defer streamManager.Destroy()
		if stream, err := streamManager.Get("0"); err != nil {
        shell.HandleError(streamManager, err)
        return
        } else {
            command.Stdin = stream
        }
        if stream, err := streamManager.Get("1"); err != nil {
            shell.HandleError(streamManager, err)
            return
        } else {
            command.Stdout = stream
        }
        if stream, err := streamManager.Get("2"); err != nil {
            shell.HandleError(streamManager, err)
            return
        } else {
            command.Stderr = stream
        }
		if err := command.Run(); err != nil {
			shell.HandleError(streamManager, err)
			return
		}
        shell.ExitCode = command.ExitCode

	}()
	if shell.ExitCode == 0 {
		shell.ExitCode = 1
	} else {
		shell.ExitCode = 0
	}
}

#(ENDTEST)



#(TEST: can invert exit code recursivly)
! ! command
#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		var commandName = "command"
		var arguments []string
		var command = shell.Command(commandName, arguments...)
		streamManager := streamManager.Clone()
        defer streamManager.Destroy()
		if stream, err := streamManager.Get("0"); err != nil {
        shell.HandleError(streamManager, err)
        return
        } else {
            command.Stdin = stream
        }
        if stream, err := streamManager.Get("1"); err != nil {
            shell.HandleError(streamManager, err)
            return
        } else {
            command.Stdout = stream
        }
        if stream, err := streamManager.Get("2"); err != nil {
            shell.HandleError(streamManager, err)
            return
        } else {
            command.Stderr = stream
        }
		if err := command.Run(); err != nil {
			shell.HandleError(streamManager, err)
			return
		}
        shell.ExitCode = command.ExitCode

	}()
	if shell.ExitCode == 0 {
		shell.ExitCode = 1
	} else {
		shell.ExitCode = 0
	}
	if shell.ExitCode == 0 {
		shell.ExitCode = 1
	} else {
		shell.ExitCode = 0
	}
}

#(ENDTEST)
