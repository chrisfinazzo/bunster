#(TEST: simple subshell)

(
    echo foo
    echo bar
)

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var parentShell = shell
		shell := shell.Clone()
		defer shell.Terminate(streamManager)
		defer func() { parentShell.ExitCode = shell.ExitCode }()
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "echo"
			var arguments []string
			var env = make(map[string]string)
			arguments = append(arguments, "foo")
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err)
				return
			}

		}()
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "echo"
			var arguments []string
			var env = make(map[string]string)
			arguments = append(arguments, "bar")
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err)
				return
			}

		}()

	}()
}

#(ENDTEST)



#(TEST: redirections on subshells)

(
    echo foo
    echo bar
) >output.txt <input.txt

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		stream0, err := streamManager.OpenStream(shell.Path("output.txt"), runtime.STREAM_FLAG_WRITE)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("1", stream0)
		stream1, err := streamManager.OpenStream(shell.Path("input.txt"), runtime.STREAM_FLAG_READ)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("0", stream1)
		var parentShell = shell
		shell := shell.Clone()
		defer shell.Terminate(streamManager)
		defer func() { parentShell.ExitCode = shell.ExitCode }()
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "echo"
			var arguments []string
			var env = make(map[string]string)
			arguments = append(arguments, "foo")
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err)
				return
			}

		}()
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "echo"
			var arguments []string
			var env = make(map[string]string)
			arguments = append(arguments, "bar")
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err)
				return
			}

		}()

	}()
}

#(ENDTEST)



#(TEST: subshells containing piplines and lists)

(
    echo foo | cat \
    && echo bar | cat
)

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var parentShell = shell
		shell := shell.Clone()
		defer shell.Terminate(streamManager)
		defer func() { parentShell.ExitCode = shell.ExitCode }()
		func() {
			var pipelineWaitgroup []func() int
			pipeReader1, pipeWriter1, err := runtime.NewPipe()
			if err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			func() {
				streamManager := streamManager.Clone()
				streamManager.Add("1", pipeWriter1)
				shell := shell.Clone()
				var done = make(chan struct{}, 1)
				pipelineWaitgroup = append(pipelineWaitgroup, func() int {
					<-done
					shell.Terminate(streamManager)
					streamManager.Destroy()
					return shell.ExitCode
				})
				go func() {
					defer func() { done <- struct{}{} }()
					func() {
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						var commandName = "echo"
						var arguments []string
						var env = make(map[string]string)
						arguments = append(arguments, "foo")
						if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
							shell.HandleError(streamManager, err)
							return
						}

					}()

				}()

			}()
			func() {
				streamManager := streamManager.Clone()
				streamManager.Add("0", pipeReader1)
				shell := shell.Clone()
				var done = make(chan struct{}, 1)
				pipelineWaitgroup = append(pipelineWaitgroup, func() int {
					<-done
					shell.Terminate(streamManager)
					streamManager.Destroy()
					return shell.ExitCode
				})
				go func() {
					defer func() { done <- struct{}{} }()
					func() {
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						var commandName = "cat"
						var arguments []string
						var env = make(map[string]string)
						if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
							shell.HandleError(streamManager, err)
							return
						}

					}()

				}()

			}()
			for _, wait := range pipelineWaitgroup {
				shell.ExitCode = wait()
			}

		}()
		if shell.ExitCode == 0 {
			func() {
				var pipelineWaitgroup []func() int
				pipeReader1, pipeWriter1, err := runtime.NewPipe()
				if err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				func() {
					streamManager := streamManager.Clone()
					streamManager.Add("1", pipeWriter1)
					shell := shell.Clone()
					var done = make(chan struct{}, 1)
					pipelineWaitgroup = append(pipelineWaitgroup, func() int {
						<-done
						shell.Terminate(streamManager)
						streamManager.Destroy()
						return shell.ExitCode
					})
					go func() {
						defer func() { done <- struct{}{} }()
						func() {
							streamManager := streamManager.Clone()
							defer streamManager.Destroy()
							var commandName = "echo"
							var arguments []string
							var env = make(map[string]string)
							arguments = append(arguments, "bar")
							if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
								shell.HandleError(streamManager, err)
								return
							}

						}()

					}()

				}()
				func() {
					streamManager := streamManager.Clone()
					streamManager.Add("0", pipeReader1)
					shell := shell.Clone()
					var done = make(chan struct{}, 1)
					pipelineWaitgroup = append(pipelineWaitgroup, func() int {
						<-done
						shell.Terminate(streamManager)
						streamManager.Destroy()
						return shell.ExitCode
					})
					go func() {
						defer func() { done <- struct{}{} }()
						func() {
							streamManager := streamManager.Clone()
							defer streamManager.Destroy()
							var commandName = "cat"
							var arguments []string
							var env = make(map[string]string)
							if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
								shell.HandleError(streamManager, err)
								return
							}

						}()

					}()

				}()
				for _, wait := range pipelineWaitgroup {
					shell.ExitCode = wait()
				}

			}()

		}

	}()
}


#(ENDTEST)



#(TEST: nested subshells)

(
    (
        echo foo
    )

    (
        echo bar
    )
)

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var parentShell = shell
		shell := shell.Clone()
		defer shell.Terminate(streamManager)
		defer func() { parentShell.ExitCode = shell.ExitCode }()
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var parentShell = shell
			shell := shell.Clone()
			defer shell.Terminate(streamManager)
			defer func() { parentShell.ExitCode = shell.ExitCode }()
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, "foo")
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()

		}()
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var parentShell = shell
			shell := shell.Clone()
			defer shell.Terminate(streamManager)
			defer func() { parentShell.ExitCode = shell.ExitCode }()
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, "bar")
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()

		}()

	}()
}

#(ENDTEST)


