#(TEST: simple function declaration)

function foobar {
    echo foo bar
}

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foobar", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "echo"
			var arguments []string
			var env = make(map[string]string)
			arguments = append(arguments, "foo")
			arguments = append(arguments, "bar")
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err)
				return
			}

		}()

	})
}

#(ENDTEST)



#(TEST: naked functions declaration)

foobar() {
    echo foo bar
}

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foobar", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "echo"
			var arguments []string
			var env = make(map[string]string)
			arguments = append(arguments, "foo")
			arguments = append(arguments, "bar")
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err)
				return
			}

		}()

	})
}

#(ENDTEST)


#(TEST: can declare functions in list)

foobar() {
    echo foo bar
} && foobar() {
    echo foo bar
} || foobar() {
    echo foo bar
}

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foobar", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "echo"
			var arguments []string
			var env = make(map[string]string)
			arguments = append(arguments, "foo")
			arguments = append(arguments, "bar")
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err)
				return
			}

		}()

	})
	if shell.ExitCode == 0 {
		shell.RegisterFunction("foobar", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
			defer shell.Terminate(streamManager)
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, "foo")
				arguments = append(arguments, "bar")
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()

		})

	}
	if shell.ExitCode != 0 {
		shell.RegisterFunction("foobar", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
			defer shell.Terminate(streamManager)
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, "foo")
				arguments = append(arguments, "bar")
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()

		})

	}
}


#(ENDTEST)





#(TEST: declaring nested functions)

foobar() {

    foobar() {
        echo foo bar
    }

}

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foobar", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		shell.RegisterFunction("foobar", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
			defer shell.Terminate(streamManager)
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, "foo")
				arguments = append(arguments, "bar")
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()

		})

	})
}

#(ENDTEST)



#(TEST: local function variables)

foobar() {

  local key=value

}

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foobar", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		func() {
			shell.SetLocalVar("key", "value")

		}()

	})
}

#(ENDTEST)



#(TEST: local function variables)

foobar() (

  local key=value

)

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foobar", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	shell = shell.Clone()
		defer shell.Terminate(streamManager)
		func() {
			shell.SetLocalVar("key", "value")

		}()

	})
}

#(ENDTEST)




#(TEST: return within function)

foo() {

  return 
}


bar() {
  return 123 
}


#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foo", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		var breakpoint1 = false
		_ = breakpoint1
		breakpoint1 = true
		shell.ExitCode = runtime.ParseInt("0")
		return
	})
	shell.RegisterFunction("bar", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		var breakpoint2 = false
		_ = breakpoint2
		breakpoint2 = true
		shell.ExitCode = runtime.ParseInt("123")
		return
	})
}


#(ENDTEST)



#(TEST: return within nested lists)

foo() {
	true &&	return
}

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foo", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		var breakpoint1 = false
		_ = breakpoint1
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "true"
			var arguments []string
			var env = make(map[string]string)
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err)
				return
			}

		}()
		if shell.ExitCode == 0 {
			breakpoint1 = true
			shell.ExitCode = runtime.ParseInt("0")
			return
		}

	})
}

#(ENDTEST)


#(TEST: return within nested if)

foo() {
	if true; then 
  		return
	fi 
}

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foo", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		var breakpoint1 = false
		_ = breakpoint1
		func() {
			var condition = false
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "true"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
			condition = shell.ExitCode == 0
			shell.ExitCode = 0
			if condition {
				breakpoint1 = true
				shell.ExitCode = runtime.ParseInt("0")
				return
			}

		}()
		if breakpoint1 {
			return
		}

	})
}


#(ENDTEST)



#(TEST: return within nested case)

foo() {
	case foo in 
		*) return
	esac
}

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foo", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		var breakpoint1 = false
		_ = breakpoint1
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var needle = "foo"
			var fallback = false
			var _ = fallback
			if runtime.PatternMatch(needle, "*") {
				breakpoint1 = true
				shell.ExitCode = runtime.ParseInt("0")
				return
				return
			}

		}()
		if breakpoint1 {
			return
		}

	})
}

#(ENDTEST)



#(TEST: return within nested while loop)

foo() {
	while true; do 
		return
	done 
}

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foo", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		var breakpoint1 = false
		_ = breakpoint1
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			for {
				func() {
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					var commandName = "true"
					var arguments []string
					var env = make(map[string]string)
					if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
						shell.HandleError(streamManager, err)
						return
					}

				}()
				var condition = shell.ExitCode == 0
				shell.ExitCode = 0
				if !condition {
					break
				}
				breakpoint1 = true
				shell.ExitCode = runtime.ParseInt("0")
				return
			}

		}()
		if breakpoint1 {
			return
		}

	})
}

#(ENDTEST)





#(TEST: return within nested until loop)

foo() {
	until true; do 
		return
	done 
}

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foo", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		var breakpoint1 = false
		_ = breakpoint1
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			for {
				func() {
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					var commandName = "true"
					var arguments []string
					var env = make(map[string]string)
					if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
						shell.HandleError(streamManager, err)
						return
					}

				}()
				var condition = shell.ExitCode == 0
				shell.ExitCode = 0
				if condition {
					break
				}
				breakpoint1 = true
				shell.ExitCode = runtime.ParseInt("0")
				return
			}

		}()
		if breakpoint1 {
			return
		}

	})
}

#(ENDTEST)





#(TEST: return within nested for..in loop)

foo() {
	for arg; do 
		return
	done 
}

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foo", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		var breakpoint1 = false
		_ = breakpoint1
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			for _, member := range shell.Args {
				shell.SetVar("arg", member)
				breakpoint1 = true
				shell.ExitCode = runtime.ParseInt("0")
				return
			}

		}()
		if breakpoint1 {
			return
		}

	})
}

#(ENDTEST)




#(TEST: return within nested for((...)) loop)

foo() {
	for ((;;)); do 
		return
	done 
}

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foo", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		var breakpoint1 = false
		_ = breakpoint1
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var arithmeticResult = 1
			_ = arithmeticResult
			for {
				breakpoint1 = true
				shell.ExitCode = runtime.ParseInt("0")
				return
			}

		}()
		if breakpoint1 {
			return
		}

	})
}

#(ENDTEST)



#(TEST: can define flags)

function foo(
	-a 
	-b=
	-c[=]
	--abc 
	--efg=
	--hij[=]
) {
	return;
}

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foo", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		var breakpoint1 = false
		_ = breakpoint1
		flagParser := runtime.NewFlagParser()
		flagParser.AddShortFlag("a", runtime.BooleanFlag, false)
		flagParser.AddShortFlag("b", runtime.StringFlag, true)
		flagParser.AddShortFlag("c", runtime.StringFlag, false)
		flagParser.AddLongFlag("abc", runtime.BooleanFlag, false)
		flagParser.AddLongFlag("efg", runtime.StringFlag, true)
		flagParser.AddLongFlag("hij", runtime.StringFlag, false)
		results, err := flagParser.Parse(shell.Args)
		if err != nil {
			shell.HandleError(streamManager, err, "foo")
			return
		}
		shell.LoadMap("fflags_", results.Flags)
		shell.Args = results.Args
		breakpoint1 = true
		shell.ExitCode = runtime.ParseInt("0")
		return
	})
}

#(ENDTEST)

