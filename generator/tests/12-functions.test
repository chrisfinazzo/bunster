#(TEST: simple function declaration)

function foobar {
    echo foo bar
}

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foobar", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "echo"
			var arguments []string
			var env = make(map[string]string)
			arguments = append(arguments, "foo")
			arguments = append(arguments, "bar")
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err)
				return
			}

		}()

	})
}

#(ENDTEST)



#(TEST: naked functions declaration)

foobar() {
    echo foo bar
}

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foobar", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "echo"
			var arguments []string
			var env = make(map[string]string)
			arguments = append(arguments, "foo")
			arguments = append(arguments, "bar")
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err)
				return
			}

		}()

	})
}

#(ENDTEST)


#(TEST: can declare functions in list)

foobar() {
    echo foo bar
} && foobar() {
    echo foo bar
} || foobar() {
    echo foo bar
}

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foobar", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "echo"
			var arguments []string
			var env = make(map[string]string)
			arguments = append(arguments, "foo")
			arguments = append(arguments, "bar")
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err)
				return
			}

		}()

	})
	if shell.ExitCode == 0 {
		shell.RegisterFunction("foobar", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
			defer shell.Terminate(streamManager)
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, "foo")
				arguments = append(arguments, "bar")
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()

		})

	}
	if shell.ExitCode != 0 {
		shell.RegisterFunction("foobar", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
			defer shell.Terminate(streamManager)
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, "foo")
				arguments = append(arguments, "bar")
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()

		})

	}
}


#(ENDTEST)





#(TEST: declaring nested functions)

foobar() {

    foobar() {
        echo foo bar
    }

}

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foobar", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		shell.RegisterFunction("foobar", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
			defer shell.Terminate(streamManager)
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, "foo")
				arguments = append(arguments, "bar")
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()

		})

	})
}

#(ENDTEST)



#(TEST: local function variables)

foobar() {

  local key=value

}

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foobar", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
		defer shell.Terminate(streamManager)
		func() {
			shell.SetLocalVar("key", "value")

		}()

	})
}

#(ENDTEST)



#(TEST: local function variables)

foobar() (

  local key=value

)

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	shell.RegisterFunction("foobar", func(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	shell = shell.Clone()
		defer shell.Terminate(streamManager)
		func() {
			shell.SetLocalVar("key", "value")

		}()

	})
}

#(ENDTEST)
