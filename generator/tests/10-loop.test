#(TEST: simple `while` loop)

while true; do
    echo "foo bar"
done

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for {
    		func() {
    			var commandName = "true"
    			var arguments []string
    			var command = shell.Command(commandName, arguments...)
    			streamManager := streamManager.Clone()
    			defer streamManager.Destroy()
    			if stream, err := streamManager.Get("0"); err != nil {
    				shell.HandleError(streamManager, err)
    				return
    			} else {
    				command.Stdin = stream
    			}
    			if stream, err := streamManager.Get("1"); err != nil {
    				shell.HandleError(streamManager, err)
    				return
    			} else {
    				command.Stdout = stream
    			}
    			if stream, err := streamManager.Get("2"); err != nil {
    				shell.HandleError(streamManager, err)
    				return
    			} else {
    				command.Stderr = stream
    			}
    			if err := command.Run(); err != nil {
    				shell.HandleError(streamManager, err)
    				return
    			}
    			shell.ExitCode = command.ExitCode

    		}()
    		var condition = shell.ExitCode == 0
    		shell.ExitCode = 0
            if !condition {
                break
            }
			func() {
				var commandName = "echo"
				var arguments []string
				arguments = append(arguments, "foo bar")
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
		}

	}()
}

#(ENDTEST)



#(TEST: `while` loop with redirections)

while true; do
    echo "foo bar"
done >file.txt <input.txt

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		stream0, err := streamManager.OpenStream("file.txt", runtime.STREAM_FLAG_WRITE)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("1", stream0)
		stream1, err := streamManager.OpenStream("input.txt", runtime.STREAM_FLAG_READ)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("0", stream1)
		for {
    		func() {
    			var commandName = "true"
    			var arguments []string
    			var command = shell.Command(commandName, arguments...)
    			streamManager := streamManager.Clone()
    			defer streamManager.Destroy()
    			if stream, err := streamManager.Get("0"); err != nil {
    				shell.HandleError(streamManager, err)
    				return
    			} else {
    				command.Stdin = stream
    			}
    			if stream, err := streamManager.Get("1"); err != nil {
    				shell.HandleError(streamManager, err)
    				return
    			} else {
    				command.Stdout = stream
    			}
    			if stream, err := streamManager.Get("2"); err != nil {
    				shell.HandleError(streamManager, err)
    				return
    			} else {
    				command.Stderr = stream
    			}
    			if err := command.Run(); err != nil {
    				shell.HandleError(streamManager, err)
    				return
    			}
    			shell.ExitCode = command.ExitCode

    		}()
      		var condition = shell.ExitCode == 0
      		shell.ExitCode = 0
            if !condition {
                break
            }
			func() {
				var commandName = "echo"
				var arguments []string
				arguments = append(arguments, "foo bar")
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
		}

	}()
}

#(ENDTEST)




#(TEST: `while` loop within pipelines)

while true; do
    echo "foo bar"
done |
    while true; do
        cat
done | command

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		var pipelineWaitgroup []func() error
		pipeReader1, pipeWriter1, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add("1", pipeWriter1)
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, func() error {
				<-done
				streamManager.Destroy()
				return nil
			})
			go func() {
			    for {
    				func() {
    					var commandName = "true"
    					var arguments []string
    					var command = shell.Command(commandName, arguments...)
    					streamManager := streamManager.Clone()
    					defer streamManager.Destroy()
    					if stream, err := streamManager.Get("0"); err != nil {
    						shell.HandleError(streamManager, err)
    						return
    					} else {
    						command.Stdin = stream
    					}
    					if stream, err := streamManager.Get("1"); err != nil {
    						shell.HandleError(streamManager, err)
    						return
    					} else {
    						command.Stdout = stream
    					}
    					if stream, err := streamManager.Get("2"); err != nil {
    						shell.HandleError(streamManager, err)
    						return
    					} else {
    						command.Stderr = stream
    					}
    					if err := command.Run(); err != nil {
    						shell.HandleError(streamManager, err)
    						return
    					}
    					shell.ExitCode = command.ExitCode

    				}()
                    var condition = shell.ExitCode == 0
              		shell.ExitCode = 0
                    if !condition {
                        break
                    }
					func() {
						var commandName = "echo"
						var arguments []string
						arguments = append(arguments, "foo bar")
						var command = shell.Command(commandName, arguments...)
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						if stream, err := streamManager.Get("0"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stdin = stream
						}
						if stream, err := streamManager.Get("1"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stdout = stream
						}
						if stream, err := streamManager.Get("2"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stderr = stream
						}
						if err := command.Run(); err != nil {
							shell.HandleError(streamManager, err)
							return
						}
						shell.ExitCode = command.ExitCode

					}()
				}
				done <- struct{}{}

			}()

		}()
		pipeReader2, pipeWriter2, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add("1", pipeWriter2)
			streamManager.Add("0", pipeReader1)
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, func() error {
				<-done
				streamManager.Destroy()
				return nil
			})
			go func() {
				for {
    				func() {
    					var commandName = "true"
    					var arguments []string
    					var command = shell.Command(commandName, arguments...)
    					streamManager := streamManager.Clone()
    					defer streamManager.Destroy()
    					if stream, err := streamManager.Get("0"); err != nil {
    						shell.HandleError(streamManager, err)
    						return
    					} else {
    						command.Stdin = stream
    					}
    					if stream, err := streamManager.Get("1"); err != nil {
    						shell.HandleError(streamManager, err)
    						return
    					} else {
    						command.Stdout = stream
    					}
    					if stream, err := streamManager.Get("2"); err != nil {
    						shell.HandleError(streamManager, err)
    						return
    					} else {
    						command.Stderr = stream
    					}
    					if err := command.Run(); err != nil {
    						shell.HandleError(streamManager, err)
    						return
    					}
    					shell.ExitCode = command.ExitCode

    				}()
                    var condition = shell.ExitCode == 0
              		shell.ExitCode = 0
                    if !condition {
                        break
                    }
					func() {
						var commandName = "cat"
						var arguments []string
						var command = shell.Command(commandName, arguments...)
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						if stream, err := streamManager.Get("0"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stdin = stream
						}
						if stream, err := streamManager.Get("1"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stdout = stream
						}
						if stream, err := streamManager.Get("2"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stderr = stream
						}
						if err := command.Run(); err != nil {
							shell.HandleError(streamManager, err)
							return
						}
						shell.ExitCode = command.ExitCode

					}()
				}
				done <- struct{}{}

			}()

		}()
		func() {
			var commandName = "command"
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add("0", pipeReader2)
			if stream, err := streamManager.Get("0"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdin = stream
			}
			if stream, err := streamManager.Get("1"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdout = stream
			}
			if stream, err := streamManager.Get("2"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stderr = stream
			}
			if err := command.Start(); err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error {
				defer streamManager.Destroy()
				return command.Wait()
			})

		}()
		for i, wait := range pipelineWaitgroup {
			if err := wait(); err != nil {
				shell.HandleError(streamManager, err)
			}
			if i < (len(pipelineWaitgroup) - 1) {
				shell.ExitCode = 0
			}
		}

	}()
}

#(ENDTEST)



#(TEST: simple `until` loop)

until true; do
    echo "foo bar"
done

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for {
    		func() {
    			var commandName = "true"
    			var arguments []string
    			var command = shell.Command(commandName, arguments...)
    			streamManager := streamManager.Clone()
    			defer streamManager.Destroy()
    			if stream, err := streamManager.Get("0"); err != nil {
    				shell.HandleError(streamManager, err)
    				return
    			} else {
    				command.Stdin = stream
    			}
    			if stream, err := streamManager.Get("1"); err != nil {
    				shell.HandleError(streamManager, err)
    				return
    			} else {
    				command.Stdout = stream
    			}
    			if stream, err := streamManager.Get("2"); err != nil {
    				shell.HandleError(streamManager, err)
    				return
    			} else {
    				command.Stderr = stream
    			}
    			if err := command.Run(); err != nil {
    				shell.HandleError(streamManager, err)
    				return
    			}
    			shell.ExitCode = command.ExitCode

    		}()
    		var condition = shell.ExitCode == 0
    		shell.ExitCode = 0
            if condition {
                break
            }
			func() {
				var commandName = "echo"
				var arguments []string
				arguments = append(arguments, "foo bar")
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
		}

	}()
}

#(ENDTEST)



#(TEST: `until` loop with redirections)

until true; do
    echo "foo bar"
done >file.txt <input.txt

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		stream0, err := streamManager.OpenStream("file.txt", runtime.STREAM_FLAG_WRITE)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("1", stream0)
		stream1, err := streamManager.OpenStream("input.txt", runtime.STREAM_FLAG_READ)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("0", stream1)
		for {
    		func() {
    			var commandName = "true"
    			var arguments []string
    			var command = shell.Command(commandName, arguments...)
    			streamManager := streamManager.Clone()
    			defer streamManager.Destroy()
    			if stream, err := streamManager.Get("0"); err != nil {
    				shell.HandleError(streamManager, err)
    				return
    			} else {
    				command.Stdin = stream
    			}
    			if stream, err := streamManager.Get("1"); err != nil {
    				shell.HandleError(streamManager, err)
    				return
    			} else {
    				command.Stdout = stream
    			}
    			if stream, err := streamManager.Get("2"); err != nil {
    				shell.HandleError(streamManager, err)
    				return
    			} else {
    				command.Stderr = stream
    			}
    			if err := command.Run(); err != nil {
    				shell.HandleError(streamManager, err)
    				return
    			}
    			shell.ExitCode = command.ExitCode

    		}()
      		var condition = shell.ExitCode == 0
      		shell.ExitCode = 0
            if condition {
                break
            }
			func() {
				var commandName = "echo"
				var arguments []string
				arguments = append(arguments, "foo bar")
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
		}

	}()
}

#(ENDTEST)




#(TEST: `until` loop within pipelines)

until true; do
    echo "foo bar"
done |
    until true; do
        cat
done | command

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		var pipelineWaitgroup []func() error
		pipeReader1, pipeWriter1, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add("1", pipeWriter1)
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, func() error {
				<-done
				streamManager.Destroy()
				return nil
			})
			go func() {
			    for {
    				func() {
    					var commandName = "true"
    					var arguments []string
    					var command = shell.Command(commandName, arguments...)
    					streamManager := streamManager.Clone()
    					defer streamManager.Destroy()
    					if stream, err := streamManager.Get("0"); err != nil {
    						shell.HandleError(streamManager, err)
    						return
    					} else {
    						command.Stdin = stream
    					}
    					if stream, err := streamManager.Get("1"); err != nil {
    						shell.HandleError(streamManager, err)
    						return
    					} else {
    						command.Stdout = stream
    					}
    					if stream, err := streamManager.Get("2"); err != nil {
    						shell.HandleError(streamManager, err)
    						return
    					} else {
    						command.Stderr = stream
    					}
    					if err := command.Run(); err != nil {
    						shell.HandleError(streamManager, err)
    						return
    					}
    					shell.ExitCode = command.ExitCode

    				}()
                    var condition = shell.ExitCode == 0
              		shell.ExitCode = 0
                    if condition {
                        break
                    }
					func() {
						var commandName = "echo"
						var arguments []string
						arguments = append(arguments, "foo bar")
						var command = shell.Command(commandName, arguments...)
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						if stream, err := streamManager.Get("0"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stdin = stream
						}
						if stream, err := streamManager.Get("1"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stdout = stream
						}
						if stream, err := streamManager.Get("2"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stderr = stream
						}
						if err := command.Run(); err != nil {
							shell.HandleError(streamManager, err)
							return
						}
						shell.ExitCode = command.ExitCode

					}()
				}
				done <- struct{}{}

			}()

		}()
		pipeReader2, pipeWriter2, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add("1", pipeWriter2)
			streamManager.Add("0", pipeReader1)
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, func() error {
				<-done
				streamManager.Destroy()
				return nil
			})
			go func() {
				for {
    				func() {
    					var commandName = "true"
    					var arguments []string
    					var command = shell.Command(commandName, arguments...)
    					streamManager := streamManager.Clone()
    					defer streamManager.Destroy()
    					if stream, err := streamManager.Get("0"); err != nil {
    						shell.HandleError(streamManager, err)
    						return
    					} else {
    						command.Stdin = stream
    					}
    					if stream, err := streamManager.Get("1"); err != nil {
    						shell.HandleError(streamManager, err)
    						return
    					} else {
    						command.Stdout = stream
    					}
    					if stream, err := streamManager.Get("2"); err != nil {
    						shell.HandleError(streamManager, err)
    						return
    					} else {
    						command.Stderr = stream
    					}
    					if err := command.Run(); err != nil {
    						shell.HandleError(streamManager, err)
    						return
    					}
    					shell.ExitCode = command.ExitCode

    				}()
                    var condition = shell.ExitCode == 0
              		shell.ExitCode = 0
                    if condition {
                        break
                    }
					func() {
						var commandName = "cat"
						var arguments []string
						var command = shell.Command(commandName, arguments...)
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						if stream, err := streamManager.Get("0"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stdin = stream
						}
						if stream, err := streamManager.Get("1"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stdout = stream
						}
						if stream, err := streamManager.Get("2"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stderr = stream
						}
						if err := command.Run(); err != nil {
							shell.HandleError(streamManager, err)
							return
						}
						shell.ExitCode = command.ExitCode

					}()
				}
				done <- struct{}{}

			}()

		}()
		func() {
			var commandName = "command"
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add("0", pipeReader2)
			if stream, err := streamManager.Get("0"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdin = stream
			}
			if stream, err := streamManager.Get("1"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdout = stream
			}
			if stream, err := streamManager.Get("2"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stderr = stream
			}
			if err := command.Start(); err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error {
				defer streamManager.Destroy()
				return command.Wait()
			})

		}()
		for i, wait := range pipelineWaitgroup {
			if err := wait(); err != nil {
				shell.HandleError(streamManager, err)
			}
			if i < (len(pipelineWaitgroup) - 1) {
				shell.ExitCode = 0
			}
		}

	}()
}

#(ENDTEST)


#(TEST: the `break` builtin within loop)

while true; do
    break
done

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for {
			func() {
				var commandName = "true"
				var arguments []string
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
			var condition = shell.ExitCode == 0
			shell.ExitCode = 0
			if !condition {
				break
			}
			break
		}

	}()
}

#(ENDTEST)



#(TEST: the `continue` builtin within loop)

while true; do
    continue
done

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for {
			func() {
				var commandName = "true"
				var arguments []string
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
			var condition = shell.ExitCode == 0
			shell.ExitCode = 0
			if !condition {
				break
			}
			continue
		}

	}()
}

#(ENDTEST)



#(TEST: the `break` & `continue` builtins within `list` in loops)

while true; do
    true && continue ||  break
done

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for {
			func() {
				var commandName = "true"
				var arguments []string
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
			var condition = shell.ExitCode == 0
			shell.ExitCode = 0
			if !condition {
				break
			}
			func() {
				var commandName = "true"
				var arguments []string
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
			if shell.ExitCode == 0 {
				continue

			}
			if shell.ExitCode != 0 {
				break

			}
		}

	}()
}

#(ENDTEST)






#(TEST: simple `for` loop)

for arg; do
    echo $arg
done

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for _, member := range shell.Args {
			shell.SetVar("arg", member)
			func() {
				var commandName = "echo"
				var arguments []string
				arguments = append(arguments, shell.ReadVar("arg"))
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
		}

	}()
}

#(ENDTEST)



#(TEST: simple `for` loop over operands)

for arg in foo bar baz; do
    echo $arg
done

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var members []string
		members = append(members, "foo")
		members = append(members, "bar")
		members = append(members, "baz")
		for _, member := range members {
			shell.SetVar("arg", member)
			func() {
				var commandName = "echo"
				var arguments []string
				arguments = append(arguments, shell.ReadVar("arg"))
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
		}

	}()
}

#(ENDTEST)



#(TEST: redirections on `for` loops)

for arg; do
    echo $arg
done >file.txt <input.txt

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		stream0, err := streamManager.OpenStream("file.txt", runtime.STREAM_FLAG_WRITE)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("1", stream0)
		stream1, err := streamManager.OpenStream("input.txt", runtime.STREAM_FLAG_READ)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("0", stream1)
		for _, member := range shell.Args {
			shell.SetVar("arg", member)
			func() {
				var commandName = "echo"
				var arguments []string
				arguments = append(arguments, shell.ReadVar("arg"))
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
		}

	}()
}


#(ENDTEST)





#(TEST: `for` loop within pipeline)

for arg in foo bar baz; do
    echo $arg
done | cat

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		var pipelineWaitgroup []func() error
		pipeReader1, pipeWriter1, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add("1", pipeWriter1)
			var members []string
			members = append(members, "foo")
			members = append(members, "bar")
			members = append(members, "baz")
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, func() error {
				<-done
				streamManager.Destroy()
				return nil
			})
			go func() {
				for _, member := range members {
					shell.SetVar("arg", member)
					func() {
						var commandName = "echo"
						var arguments []string
						arguments = append(arguments, shell.ReadVar("arg"))
						var command = shell.Command(commandName, arguments...)
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						if stream, err := streamManager.Get("0"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stdin = stream
						}
						if stream, err := streamManager.Get("1"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stdout = stream
						}
						if stream, err := streamManager.Get("2"); err != nil {
							shell.HandleError(streamManager, err)
							return
						} else {
							command.Stderr = stream
						}
						if err := command.Run(); err != nil {
							shell.HandleError(streamManager, err)
							return
						}
						shell.ExitCode = command.ExitCode

					}()
				}
				done <- struct{}{}

			}()

		}()
		func() {
			var commandName = "cat"
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add("0", pipeReader1)
			if stream, err := streamManager.Get("0"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdin = stream
			}
			if stream, err := streamManager.Get("1"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdout = stream
			}
			if stream, err := streamManager.Get("2"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stderr = stream
			}
			if err := command.Start(); err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error {
				defer streamManager.Destroy()
				return command.Wait()
			})

		}()
		for i, wait := range pipelineWaitgroup {
			if err := wait(); err != nil {
				shell.HandleError(streamManager, err)
			}
			if i < (len(pipelineWaitgroup) - 1) {
				shell.ExitCode = 0
			}
		}

	}()
}

#(ENDTEST)
