#(TEST: simple `while` loop)

while true; do
    echo "foo bar"
done

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "true"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
			var condition = shell.ExitCode == 0
			shell.ExitCode = 0
			if !condition {
				break
			}
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, "foo bar")
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
		}

	}()
}

#(ENDTEST)


#(TEST: simple `while` loop)

while true; true; do
    echo "foo bar"
done

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "true"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "true"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
			var condition = shell.ExitCode == 0
			shell.ExitCode = 0
			if !condition {
				break
			}
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, "foo bar")
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
		}

	}()
}


#(ENDTEST)


#(TEST: `while` loop with redirections)

while true; do
    echo "foo bar"
done >file.txt <input.txt

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		stream0, err := streamManager.OpenStream(shell.Path("file.txt"), runtime.STREAM_FLAG_WRITE)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("1", stream0)
		stream1, err := streamManager.OpenStream(shell.Path("input.txt"), runtime.STREAM_FLAG_READ)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("0", stream1)
		for {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "true"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
			var condition = shell.ExitCode == 0
			shell.ExitCode = 0
			if !condition {
				break
			}
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, "foo bar")
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
		}

	}()
}


#(ENDTEST)



#(TEST: simple `until` loop)

until true; do
    echo "foo bar"
done

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "true"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
			var condition = shell.ExitCode == 0
			shell.ExitCode = 0
			if condition {
				break
			}
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, "foo bar")
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
		}

	}()
}


#(ENDTEST)



#(TEST: `until` loop with redirections)

until true; do
    echo "foo bar"
done >file.txt <input.txt

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		stream0, err := streamManager.OpenStream(shell.Path("file.txt"), runtime.STREAM_FLAG_WRITE)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("1", stream0)
		stream1, err := streamManager.OpenStream(shell.Path("input.txt"), runtime.STREAM_FLAG_READ)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("0", stream1)
		for {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "true"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
			var condition = shell.ExitCode == 0
			shell.ExitCode = 0
			if condition {
				break
			}
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, "foo bar")
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
		}

	}()
}

#(ENDTEST)



#(TEST: the `break` builtin within loop)

while true; do
    break
done

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "true"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
			var condition = shell.ExitCode == 0
			shell.ExitCode = 0
			if !condition {
				break
			}
			break
		}

	}()
}


#(ENDTEST)



#(TEST: the `continue` builtin within loop)

while true; do
    continue
done

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "true"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
			var condition = shell.ExitCode == 0
			shell.ExitCode = 0
			if !condition {
				break
			}
			continue
		}

	}()
}

#(ENDTEST)



#(TEST: the `break` & `continue` builtins within `list` in loops)

while true; do
    true && continue ||  break
done

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "true"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
			var condition = shell.ExitCode == 0
			shell.ExitCode = 0
			if !condition {
				break
			}
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "true"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
			if shell.ExitCode == 0 {
				continue

			}
			if shell.ExitCode != 0 {
				break

			}
		}

	}()
}

#(ENDTEST)






#(TEST: simple `for` loop)

for arg; do
    echo $arg
done

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for _, member := range shell.Args {
			shell.SetVar("arg", member)
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, shell.ReadVar("arg"))
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
		}

	}()
}


#(ENDTEST)



#(TEST: simple `for` loop over operands)

for arg in foo bar baz; do
    echo $arg
done

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var members []string
		members = append(members, "foo")
		members = append(members, "bar")
		members = append(members, "baz")
		for _, member := range members {
			shell.SetVar("arg", member)
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, shell.ReadVar("arg"))
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
		}

	}()
}

#(ENDTEST)



#(TEST: redirections on `for` loops)

for arg; do
    echo $arg
done >file.txt <input.txt

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		stream0, err := streamManager.OpenStream(shell.Path("file.txt"), runtime.STREAM_FLAG_WRITE)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("1", stream0)
		stream1, err := streamManager.OpenStream(shell.Path("input.txt"), runtime.STREAM_FLAG_READ)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("0", stream1)
		for _, member := range shell.Args {
			shell.SetVar("arg", member)
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, shell.ReadVar("arg"))
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
		}

	}()
}


#(ENDTEST)




#(TEST: for((...)) loops)

for (( i=0; i<10; i++)); do
    cmd
done

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var arithmeticResult = 1
		_ = arithmeticResult
		var init = func() {
			shell.SetVar("i", runtime.FormatInt(0))
			arithmeticResult = runtime.ParseInt(shell.ReadVar("i"))

		}
		var test = func() int {
			arithmeticResult = runtime.CompareInt(runtime.ParseInt(shell.ReadVar("i")), "<", 10)
			return arithmeticResult

		}
		var update = func() {
			arithmeticResult = runtime.VarIncrement(shell, "i", 1, true)

		}
		for init(); test() != 0; update() {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "cmd"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
		}

	}()
}


#(ENDTEST)




#(TEST: for((...)) loop without init branch)

for (( ; i<10; i++)); do
    cmd
done

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var arithmeticResult = 1
		_ = arithmeticResult
		var test = func() int {
			arithmeticResult = runtime.CompareInt(runtime.ParseInt(shell.ReadVar("i")), "<", 10)
			return arithmeticResult

		}
		var update = func() {
			arithmeticResult = runtime.VarIncrement(shell, "i", 1, true)

		}
		for ; test() != 0; update() {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "cmd"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
		}

	}()
}

#(ENDTEST)







#(TEST: for((...)) loop with init branch only)

for (( i=0 ; ; )); do
    cmd
done

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var arithmeticResult = 1
		_ = arithmeticResult
		var init = func() {
			shell.SetVar("i", runtime.FormatInt(0))
			arithmeticResult = runtime.ParseInt(shell.ReadVar("i"))

		}
		for init(); ; {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "cmd"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
		}

	}()
}


#(ENDTEST)



#(TEST: for((...)) loop without test branch)

for (( i=0 ; ;i++ )); do
    cmd
done

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var arithmeticResult = 1
		_ = arithmeticResult
		var init = func() {
			shell.SetVar("i", runtime.FormatInt(0))
			arithmeticResult = runtime.ParseInt(shell.ReadVar("i"))

		}
		var update = func() {
			arithmeticResult = runtime.VarIncrement(shell, "i", 1, true)

		}
		for init(); ; update() {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "cmd"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
		}

	}()
}

#(ENDTEST)





#(TEST: for((...)) loop with test branch only)

for ((  ; i<10 ; )); do
    cmd
done

#(RESULT)


package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var arithmeticResult = 1
		_ = arithmeticResult
		var test = func() int {
			arithmeticResult = runtime.CompareInt(runtime.ParseInt(shell.ReadVar("i")), "<", 10)
			return arithmeticResult

		}
		for test() != 0 {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "cmd"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
		}

	}()
}

#(ENDTEST)





#(TEST: for((...)) loop without update branch )

for ((  i=0; i<10 ; )); do
    cmd
done

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var arithmeticResult = 1
		_ = arithmeticResult
		var init = func() {
			shell.SetVar("i", runtime.FormatInt(0))
			arithmeticResult = runtime.ParseInt(shell.ReadVar("i"))

		}
		var test = func() int {
			arithmeticResult = runtime.CompareInt(runtime.ParseInt(shell.ReadVar("i")), "<", 10)
			return arithmeticResult

		}
		for init(); test() != 0; {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "cmd"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
		}

	}()
}

#(ENDTEST)





#(TEST: for((...)) loop with update branch only)

for ((  ; ;i++ )); do
    cmd
done

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var arithmeticResult = 1
		_ = arithmeticResult
		var update = func() {
			arithmeticResult = runtime.VarIncrement(shell, "i", 1, true)

		}
		for ; ; update() {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "cmd"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
		}

	}()
}


#(ENDTEST)




#(TEST: for((...)) loop without any branches)

for ((  ; ; )); do
    cmd
done

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var arithmeticResult = 1
		_ = arithmeticResult
		for {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "cmd"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
		}

	}()
}

#(ENDTEST)




#(TEST: for((...)) loop can have redirections)

for ((  ; ; )); do
    cmd
done >file <file2

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		stream0, err := streamManager.OpenStream(shell.Path("file"), runtime.STREAM_FLAG_WRITE)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("1", stream0)
		stream1, err := streamManager.OpenStream(shell.Path("file2"), runtime.STREAM_FLAG_READ)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("0", stream1)
		var arithmeticResult = 1
		_ = arithmeticResult
		for {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "cmd"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err)
					return
				}

			}()
		}

	}()
}


#(ENDTEST)
