#(TEST: simple `while` loop)

while true; do
    echo "foo bar"
done

#(RESULT)
package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for {
    		func() {
    			var commandName = `true`
    			var arguments []string
    			var command = shell.Command(commandName, arguments...)
    			streamManager := streamManager.Clone()
    			defer streamManager.Destroy()
    			if stream, err := streamManager.Get(`0`); err != nil {
    				shell.HandleError(err)
    				return
    			} else {
    				command.Stdin = stream
    			}
    			if stream, err := streamManager.Get(`1`); err != nil {
    				shell.HandleError(err)
    				return
    			} else {
    				command.Stdout = stream
    			}
    			if stream, err := streamManager.Get(`2`); err != nil {
    				shell.HandleError(err)
    				return
    			} else {
    				command.Stderr = stream
    			}
    			if err := command.Run(); err != nil {
    				shell.HandleError(err)
    				return
    			}
    			shell.ExitCode = command.ProcessState.ExitCode()

    		}()
    		var condition = shell.ExitCode == 0
    		shell.ExitCode = 0
            if !condition {
                break
            }
			func() {
				var commandName = `echo`
				var arguments []string
				arguments = append(arguments, `foo bar`)
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get(`0`); err != nil {
					shell.HandleError(err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get(`1`); err != nil {
					shell.HandleError(err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get(`2`); err != nil {
					shell.HandleError(err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(err)
					return
				}
				shell.ExitCode = command.ProcessState.ExitCode()

			}()
		}

	}()
}

#(ENDTEST)



#(TEST: `while` loop with redirections)

while true; do
    echo "foo bar"
done >file.txt <input.txt

#(RESULT)

package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		stream0, err := streamManager.OpenStream(`file.txt`, runtime.STREAM_FLAG_WRITE)
		if err != nil {
			shell.HandleError(err)
			return
		}
		streamManager.Add(`1`, stream0, false)
		stream1, err := streamManager.OpenStream(`input.txt`, runtime.STREAM_FLAG_READ)
		if err != nil {
			shell.HandleError(err)
			return
		}
		streamManager.Add(`0`, stream1, false)
		for {
    		func() {
    			var commandName = `true`
    			var arguments []string
    			var command = shell.Command(commandName, arguments...)
    			streamManager := streamManager.Clone()
    			defer streamManager.Destroy()
    			if stream, err := streamManager.Get(`0`); err != nil {
    				shell.HandleError(err)
    				return
    			} else {
    				command.Stdin = stream
    			}
    			if stream, err := streamManager.Get(`1`); err != nil {
    				shell.HandleError(err)
    				return
    			} else {
    				command.Stdout = stream
    			}
    			if stream, err := streamManager.Get(`2`); err != nil {
    				shell.HandleError(err)
    				return
    			} else {
    				command.Stderr = stream
    			}
    			if err := command.Run(); err != nil {
    				shell.HandleError(err)
    				return
    			}
    			shell.ExitCode = command.ProcessState.ExitCode()

    		}()
      		var condition = shell.ExitCode == 0
      		shell.ExitCode = 0
            if !condition {
                break
            }
			func() {
				var commandName = `echo`
				var arguments []string
				arguments = append(arguments, `foo bar`)
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get(`0`); err != nil {
					shell.HandleError(err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get(`1`); err != nil {
					shell.HandleError(err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get(`2`); err != nil {
					shell.HandleError(err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(err)
					return
				}
				shell.ExitCode = command.ProcessState.ExitCode()

			}()
		}

	}()
}

#(ENDTEST)




#(TEST: `while` loop within pipelines)

while true; do
    echo "foo bar"
done |
    while true; do
        cat
done | command

#(RESULT)

package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	func() {
		var pipelineWaitgroup []func() error
		pipeReader1, pipeWriter1, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(err)
			return
		}
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add(`1`, pipeWriter1, true)
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, func() error {
				<-done
				streamManager.Destroy()
				return nil
			})
			go func() {
			    for {
    				func() {
    					var commandName = `true`
    					var arguments []string
    					var command = shell.Command(commandName, arguments...)
    					streamManager := streamManager.Clone()
    					defer streamManager.Destroy()
    					if stream, err := streamManager.Get(`0`); err != nil {
    						shell.HandleError(err)
    						return
    					} else {
    						command.Stdin = stream
    					}
    					if stream, err := streamManager.Get(`1`); err != nil {
    						shell.HandleError(err)
    						return
    					} else {
    						command.Stdout = stream
    					}
    					if stream, err := streamManager.Get(`2`); err != nil {
    						shell.HandleError(err)
    						return
    					} else {
    						command.Stderr = stream
    					}
    					if err := command.Run(); err != nil {
    						shell.HandleError(err)
    						return
    					}
    					shell.ExitCode = command.ProcessState.ExitCode()

    				}()
                    var condition = shell.ExitCode == 0
              		shell.ExitCode = 0
                    if !condition {
                        break
                    }
					func() {
						var commandName = `echo`
						var arguments []string
						arguments = append(arguments, `foo bar`)
						var command = shell.Command(commandName, arguments...)
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						if stream, err := streamManager.Get(`0`); err != nil {
							shell.HandleError(err)
							return
						} else {
							command.Stdin = stream
						}
						if stream, err := streamManager.Get(`1`); err != nil {
							shell.HandleError(err)
							return
						} else {
							command.Stdout = stream
						}
						if stream, err := streamManager.Get(`2`); err != nil {
							shell.HandleError(err)
							return
						} else {
							command.Stderr = stream
						}
						if err := command.Run(); err != nil {
							shell.HandleError(err)
							return
						}
						shell.ExitCode = command.ProcessState.ExitCode()

					}()
				}
				done <- struct{}{}

			}()

		}()
		pipeReader2, pipeWriter2, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(err)
			return
		}
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add(`1`, pipeWriter2, true)
			streamManager.Add(`0`, pipeReader1, false)
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, func() error {
				<-done
				streamManager.Destroy()
				return nil
			})
			go func() {
				for {
    				func() {
    					var commandName = `true`
    					var arguments []string
    					var command = shell.Command(commandName, arguments...)
    					streamManager := streamManager.Clone()
    					defer streamManager.Destroy()
    					if stream, err := streamManager.Get(`0`); err != nil {
    						shell.HandleError(err)
    						return
    					} else {
    						command.Stdin = stream
    					}
    					if stream, err := streamManager.Get(`1`); err != nil {
    						shell.HandleError(err)
    						return
    					} else {
    						command.Stdout = stream
    					}
    					if stream, err := streamManager.Get(`2`); err != nil {
    						shell.HandleError(err)
    						return
    					} else {
    						command.Stderr = stream
    					}
    					if err := command.Run(); err != nil {
    						shell.HandleError(err)
    						return
    					}
    					shell.ExitCode = command.ProcessState.ExitCode()

    				}()
                    var condition = shell.ExitCode == 0
              		shell.ExitCode = 0
                    if !condition {
                        break
                    }
					func() {
						var commandName = `cat`
						var arguments []string
						var command = shell.Command(commandName, arguments...)
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						if stream, err := streamManager.Get(`0`); err != nil {
							shell.HandleError(err)
							return
						} else {
							command.Stdin = stream
						}
						if stream, err := streamManager.Get(`1`); err != nil {
							shell.HandleError(err)
							return
						} else {
							command.Stdout = stream
						}
						if stream, err := streamManager.Get(`2`); err != nil {
							shell.HandleError(err)
							return
						} else {
							command.Stderr = stream
						}
						if err := command.Run(); err != nil {
							shell.HandleError(err)
							return
						}
						shell.ExitCode = command.ProcessState.ExitCode()

					}()
				}
				done <- struct{}{}

			}()

		}()
		func() {
			var commandName = `command`
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add(`0`, pipeReader2, false)
			if stream, err := streamManager.Get(`0`); err != nil {
				shell.HandleError(err)
				return
			} else {
				command.Stdin = stream
			}
			if stream, err := streamManager.Get(`1`); err != nil {
				shell.HandleError(err)
				return
			} else {
				command.Stdout = stream
			}
			if stream, err := streamManager.Get(`2`); err != nil {
				shell.HandleError(err)
				return
			} else {
				command.Stderr = stream
			}
			if err := command.Start(); err != nil {
				shell.HandleError(err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error {
				defer streamManager.Destroy()
				return command.Wait()
			})

		}()
		for i, wait := range pipelineWaitgroup {
			if err := wait(); err != nil {
				shell.HandleError(err)
			}
			if i < (len(pipelineWaitgroup) - 1) {
				shell.ExitCode = 0
			}
		}

	}()
}

#(ENDTEST)



#(TEST: simple `until` loop)

until true; do
    echo "foo bar"
done

#(RESULT)
package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for {
    		func() {
    			var commandName = `true`
    			var arguments []string
    			var command = shell.Command(commandName, arguments...)
    			streamManager := streamManager.Clone()
    			defer streamManager.Destroy()
    			if stream, err := streamManager.Get(`0`); err != nil {
    				shell.HandleError(err)
    				return
    			} else {
    				command.Stdin = stream
    			}
    			if stream, err := streamManager.Get(`1`); err != nil {
    				shell.HandleError(err)
    				return
    			} else {
    				command.Stdout = stream
    			}
    			if stream, err := streamManager.Get(`2`); err != nil {
    				shell.HandleError(err)
    				return
    			} else {
    				command.Stderr = stream
    			}
    			if err := command.Run(); err != nil {
    				shell.HandleError(err)
    				return
    			}
    			shell.ExitCode = command.ProcessState.ExitCode()

    		}()
    		var condition = shell.ExitCode == 0
    		shell.ExitCode = 0
            if condition {
                break
            }
			func() {
				var commandName = `echo`
				var arguments []string
				arguments = append(arguments, `foo bar`)
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get(`0`); err != nil {
					shell.HandleError(err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get(`1`); err != nil {
					shell.HandleError(err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get(`2`); err != nil {
					shell.HandleError(err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(err)
					return
				}
				shell.ExitCode = command.ProcessState.ExitCode()

			}()
		}

	}()
}

#(ENDTEST)



#(TEST: `until` loop with redirections)

until true; do
    echo "foo bar"
done >file.txt <input.txt

#(RESULT)

package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		stream0, err := streamManager.OpenStream(`file.txt`, runtime.STREAM_FLAG_WRITE)
		if err != nil {
			shell.HandleError(err)
			return
		}
		streamManager.Add(`1`, stream0, false)
		stream1, err := streamManager.OpenStream(`input.txt`, runtime.STREAM_FLAG_READ)
		if err != nil {
			shell.HandleError(err)
			return
		}
		streamManager.Add(`0`, stream1, false)
		for {
    		func() {
    			var commandName = `true`
    			var arguments []string
    			var command = shell.Command(commandName, arguments...)
    			streamManager := streamManager.Clone()
    			defer streamManager.Destroy()
    			if stream, err := streamManager.Get(`0`); err != nil {
    				shell.HandleError(err)
    				return
    			} else {
    				command.Stdin = stream
    			}
    			if stream, err := streamManager.Get(`1`); err != nil {
    				shell.HandleError(err)
    				return
    			} else {
    				command.Stdout = stream
    			}
    			if stream, err := streamManager.Get(`2`); err != nil {
    				shell.HandleError(err)
    				return
    			} else {
    				command.Stderr = stream
    			}
    			if err := command.Run(); err != nil {
    				shell.HandleError(err)
    				return
    			}
    			shell.ExitCode = command.ProcessState.ExitCode()

    		}()
      		var condition = shell.ExitCode == 0
      		shell.ExitCode = 0
            if condition {
                break
            }
			func() {
				var commandName = `echo`
				var arguments []string
				arguments = append(arguments, `foo bar`)
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get(`0`); err != nil {
					shell.HandleError(err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get(`1`); err != nil {
					shell.HandleError(err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get(`2`); err != nil {
					shell.HandleError(err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(err)
					return
				}
				shell.ExitCode = command.ProcessState.ExitCode()

			}()
		}

	}()
}

#(ENDTEST)




#(TEST: `until` loop within pipelines)

until true; do
    echo "foo bar"
done |
    until true; do
        cat
done | command

#(RESULT)

package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	func() {
		var pipelineWaitgroup []func() error
		pipeReader1, pipeWriter1, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(err)
			return
		}
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add(`1`, pipeWriter1, true)
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, func() error {
				<-done
				streamManager.Destroy()
				return nil
			})
			go func() {
			    for {
    				func() {
    					var commandName = `true`
    					var arguments []string
    					var command = shell.Command(commandName, arguments...)
    					streamManager := streamManager.Clone()
    					defer streamManager.Destroy()
    					if stream, err := streamManager.Get(`0`); err != nil {
    						shell.HandleError(err)
    						return
    					} else {
    						command.Stdin = stream
    					}
    					if stream, err := streamManager.Get(`1`); err != nil {
    						shell.HandleError(err)
    						return
    					} else {
    						command.Stdout = stream
    					}
    					if stream, err := streamManager.Get(`2`); err != nil {
    						shell.HandleError(err)
    						return
    					} else {
    						command.Stderr = stream
    					}
    					if err := command.Run(); err != nil {
    						shell.HandleError(err)
    						return
    					}
    					shell.ExitCode = command.ProcessState.ExitCode()

    				}()
                    var condition = shell.ExitCode == 0
              		shell.ExitCode = 0
                    if condition {
                        break
                    }
					func() {
						var commandName = `echo`
						var arguments []string
						arguments = append(arguments, `foo bar`)
						var command = shell.Command(commandName, arguments...)
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						if stream, err := streamManager.Get(`0`); err != nil {
							shell.HandleError(err)
							return
						} else {
							command.Stdin = stream
						}
						if stream, err := streamManager.Get(`1`); err != nil {
							shell.HandleError(err)
							return
						} else {
							command.Stdout = stream
						}
						if stream, err := streamManager.Get(`2`); err != nil {
							shell.HandleError(err)
							return
						} else {
							command.Stderr = stream
						}
						if err := command.Run(); err != nil {
							shell.HandleError(err)
							return
						}
						shell.ExitCode = command.ProcessState.ExitCode()

					}()
				}
				done <- struct{}{}

			}()

		}()
		pipeReader2, pipeWriter2, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(err)
			return
		}
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add(`1`, pipeWriter2, true)
			streamManager.Add(`0`, pipeReader1, false)
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, func() error {
				<-done
				streamManager.Destroy()
				return nil
			})
			go func() {
				for {
    				func() {
    					var commandName = `true`
    					var arguments []string
    					var command = shell.Command(commandName, arguments...)
    					streamManager := streamManager.Clone()
    					defer streamManager.Destroy()
    					if stream, err := streamManager.Get(`0`); err != nil {
    						shell.HandleError(err)
    						return
    					} else {
    						command.Stdin = stream
    					}
    					if stream, err := streamManager.Get(`1`); err != nil {
    						shell.HandleError(err)
    						return
    					} else {
    						command.Stdout = stream
    					}
    					if stream, err := streamManager.Get(`2`); err != nil {
    						shell.HandleError(err)
    						return
    					} else {
    						command.Stderr = stream
    					}
    					if err := command.Run(); err != nil {
    						shell.HandleError(err)
    						return
    					}
    					shell.ExitCode = command.ProcessState.ExitCode()

    				}()
                    var condition = shell.ExitCode == 0
              		shell.ExitCode = 0
                    if condition {
                        break
                    }
					func() {
						var commandName = `cat`
						var arguments []string
						var command = shell.Command(commandName, arguments...)
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						if stream, err := streamManager.Get(`0`); err != nil {
							shell.HandleError(err)
							return
						} else {
							command.Stdin = stream
						}
						if stream, err := streamManager.Get(`1`); err != nil {
							shell.HandleError(err)
							return
						} else {
							command.Stdout = stream
						}
						if stream, err := streamManager.Get(`2`); err != nil {
							shell.HandleError(err)
							return
						} else {
							command.Stderr = stream
						}
						if err := command.Run(); err != nil {
							shell.HandleError(err)
							return
						}
						shell.ExitCode = command.ProcessState.ExitCode()

					}()
				}
				done <- struct{}{}

			}()

		}()
		func() {
			var commandName = `command`
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add(`0`, pipeReader2, false)
			if stream, err := streamManager.Get(`0`); err != nil {
				shell.HandleError(err)
				return
			} else {
				command.Stdin = stream
			}
			if stream, err := streamManager.Get(`1`); err != nil {
				shell.HandleError(err)
				return
			} else {
				command.Stdout = stream
			}
			if stream, err := streamManager.Get(`2`); err != nil {
				shell.HandleError(err)
				return
			} else {
				command.Stderr = stream
			}
			if err := command.Start(); err != nil {
				shell.HandleError(err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error {
				defer streamManager.Destroy()
				return command.Wait()
			})

		}()
		for i, wait := range pipelineWaitgroup {
			if err := wait(); err != nil {
				shell.HandleError(err)
			}
			if i < (len(pipelineWaitgroup) - 1) {
				shell.ExitCode = 0
			}
		}

	}()
}

#(ENDTEST)
