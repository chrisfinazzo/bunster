#(TEST: simple `if` command)

if true;then
    echo foobar
fi

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		var condition = false
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "true"
			var arguments []string
			var env = make(map[string]string)
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err, "main.sh(2:4)")
				return
			}

		}()
		condition = shell.ExitCode == 0
		shell.ExitCode = 0
		if condition {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, "foobar")
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err, "main.sh(3:5)")
					return
				}

			}()
		}

	}()
}

#(ENDTEST)



#(TEST:  `if` command with `elif` branch)

if true; then
    echo foobar
elif true; then
    echo bazboo
fi

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		var condition = false
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "true"
			var arguments []string
			var env = make(map[string]string)
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err, "main.sh(2:4)")
				return
			}

		}()
		condition = shell.ExitCode == 0
		shell.ExitCode = 0
		if condition {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, "foobar")
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err, "main.sh(3:5)")
					return
				}

			}()
		} else {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "true"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err, "main.sh(4:6)")
					return
				}

			}()
			condition = shell.ExitCode == 0
			shell.ExitCode = 0
			if condition {
				func() {
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					var commandName = "echo"
					var arguments []string
					var env = make(map[string]string)
					arguments = append(arguments, "bazboo")
					if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
						shell.HandleError(streamManager, err, "main.sh(5:5)")
						return
					}

				}()
			}
		}

	}()
}


#(ENDTEST)





#(TEST:  `if` command with `else` branch)

if true; then
    echo foobar
else
    echo bazboo
fi

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		var condition = false
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "true"
			var arguments []string
			var env = make(map[string]string)
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err, "main.sh(2:4)")
				return
			}

		}()
		condition = shell.ExitCode == 0
		shell.ExitCode = 0
		if condition {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, "foobar")
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err, "main.sh(3:5)")
					return
				}

			}()
		}
		if !condition {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, "bazboo")
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err, "main.sh(5:5)")
					return
				}

			}()
		}

	}()
}

#(ENDTEST)





#(TEST:  `if` command with `elif` and `else` branches)

if true; then
    echo foobar
elif true || false; then
    echo bazboos
else
    echo bazboo
fi

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		var condition = false
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "true"
			var arguments []string
			var env = make(map[string]string)
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err, "main.sh(2:4)")
				return
			}

		}()
		condition = shell.ExitCode == 0
		shell.ExitCode = 0
		if condition {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, "foobar")
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err, "main.sh(3:5)")
					return
				}

			}()
		} else {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "true"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err, "main.sh(4:6)")
					return
				}

			}()
			if shell.ExitCode != 0 {
				func() {
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					var commandName = "false"
					var arguments []string
					var env = make(map[string]string)
					if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
						shell.HandleError(streamManager, err, "main.sh(4:14)")
						return
					}

				}()

			}
			condition = shell.ExitCode == 0
			shell.ExitCode = 0
			if condition {
				func() {
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					var commandName = "echo"
					var arguments []string
					var env = make(map[string]string)
					arguments = append(arguments, "bazboos")
					if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
						shell.HandleError(streamManager, err, "main.sh(5:5)")
						return
					}

				}()
			}
		}
		if !condition {
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, "bazboo")
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err, "main.sh(7:5)")
					return
				}

			}()
		}

	}()
}


#(ENDTEST)



