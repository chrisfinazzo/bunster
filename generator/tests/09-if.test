#(TEST: simple `if` command)

if true;then
    echo foobar
fi

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		var condition = false
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		func() {
			var commandName = "true"
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			if stream, err := streamManager.Get("0"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdin = stream
			}
			if stream, err := streamManager.Get("1"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdout = stream
			}
			if stream, err := streamManager.Get("2"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stderr = stream
			}
			if err := command.Run(); err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			shell.ExitCode = command.ExitCode

		}()
		condition = shell.ExitCode == 0
		shell.ExitCode = 0
		if condition {
			func() {
				var commandName = "echo"
				var arguments []string
				arguments = append(arguments, "foobar")
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
		}

	}()
}

#(ENDTEST)



#(TEST:  `if` command with `elif` branch)

if true; then
    echo foobar
elif true; then
    echo bazboo
fi

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		var condition = false
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		func() {
			var commandName = "true"
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			if stream, err := streamManager.Get("0"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdin = stream
			}
			if stream, err := streamManager.Get("1"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdout = stream
			}
			if stream, err := streamManager.Get("2"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stderr = stream
			}
			if err := command.Run(); err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			shell.ExitCode = command.ExitCode

		}()
		condition = shell.ExitCode == 0
		shell.ExitCode = 0
		if condition {
			func() {
				var commandName = "echo"
				var arguments []string
				arguments = append(arguments, "foobar")
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
		} else {
			func() {
				var commandName = "true"
				var arguments []string
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
			condition = shell.ExitCode == 0
			shell.ExitCode = 0
			if condition {
				func() {
					var commandName = "echo"
					var arguments []string
					arguments = append(arguments, "bazboo")
					var command = shell.Command(commandName, arguments...)
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					if stream, err := streamManager.Get("0"); err != nil {
						shell.HandleError(streamManager, err)
						return
					} else {
						command.Stdin = stream
					}
					if stream, err := streamManager.Get("1"); err != nil {
						shell.HandleError(streamManager, err)
						return
					} else {
						command.Stdout = stream
					}
					if stream, err := streamManager.Get("2"); err != nil {
						shell.HandleError(streamManager, err)
						return
					} else {
						command.Stderr = stream
					}
					if err := command.Run(); err != nil {
						shell.HandleError(streamManager, err)
						return
					}
					shell.ExitCode = command.ExitCode

				}()
			}
		}

	}()
}

#(ENDTEST)





#(TEST:  `if` command with `else` branch)

if true; then
    echo foobar
else
    echo bazboo
fi

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		var condition = false
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		func() {
			var commandName = "true"
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			if stream, err := streamManager.Get("0"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdin = stream
			}
			if stream, err := streamManager.Get("1"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdout = stream
			}
			if stream, err := streamManager.Get("2"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stderr = stream
			}
			if err := command.Run(); err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			shell.ExitCode = command.ExitCode

		}()
		condition = shell.ExitCode == 0
		shell.ExitCode = 0
		if condition {
			func() {
				var commandName = "echo"
				var arguments []string
				arguments = append(arguments, "foobar")
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
		}
		if !condition {
			func() {
				var commandName = "echo"
				var arguments []string
				arguments = append(arguments, "bazboo")
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
		}

	}()
}

#(ENDTEST)





#(TEST:  `if` command with `elif` and `else` branches)

if true; then
    echo foobar
elif true || false; then
    echo bazboos
else
    echo bazboo
fi

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		var condition = false
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		func() {
			var commandName = "true"
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			if stream, err := streamManager.Get("0"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdin = stream
			}
			if stream, err := streamManager.Get("1"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stdout = stream
			}
			if stream, err := streamManager.Get("2"); err != nil {
				shell.HandleError(streamManager, err)
				return
			} else {
				command.Stderr = stream
			}
			if err := command.Run(); err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			shell.ExitCode = command.ExitCode

		}()
		condition = shell.ExitCode == 0
		shell.ExitCode = 0
		if condition {
			func() {
				var commandName = "echo"
				var arguments []string
				arguments = append(arguments, "foobar")
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
		} else {
			func() {
				var commandName = "true"
				var arguments []string
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
			if shell.ExitCode != 0 {
				func() {
					var commandName = "false"
					var arguments []string
					var command = shell.Command(commandName, arguments...)
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					if stream, err := streamManager.Get("0"); err != nil {
						shell.HandleError(streamManager, err)
						return
					} else {
						command.Stdin = stream
					}
					if stream, err := streamManager.Get("1"); err != nil {
						shell.HandleError(streamManager, err)
						return
					} else {
						command.Stdout = stream
					}
					if stream, err := streamManager.Get("2"); err != nil {
						shell.HandleError(streamManager, err)
						return
					} else {
						command.Stderr = stream
					}
					if err := command.Run(); err != nil {
						shell.HandleError(streamManager, err)
						return
					}
					shell.ExitCode = command.ExitCode

				}()

			}
			condition = shell.ExitCode == 0
			shell.ExitCode = 0
			if condition {
				func() {
					var commandName = "echo"
					var arguments []string
					arguments = append(arguments, "bazboos")
					var command = shell.Command(commandName, arguments...)
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					if stream, err := streamManager.Get("0"); err != nil {
						shell.HandleError(streamManager, err)
						return
					} else {
						command.Stdin = stream
					}
					if stream, err := streamManager.Get("1"); err != nil {
						shell.HandleError(streamManager, err)
						return
					} else {
						command.Stdout = stream
					}
					if stream, err := streamManager.Get("2"); err != nil {
						shell.HandleError(streamManager, err)
						return
					} else {
						command.Stderr = stream
					}
					if err := command.Run(); err != nil {
						shell.HandleError(streamManager, err)
						return
					}
					shell.ExitCode = command.ExitCode

				}()
			}
		}
		if !condition {
			func() {
				var commandName = "echo"
				var arguments []string
				arguments = append(arguments, "bazboo")
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
		}

	}()
}

#(ENDTEST)



