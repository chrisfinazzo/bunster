
#(TEST: simple `for...in` loop)

for arg; do
    echo $arg
done

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for _, member := range shell.Args {
			shell.SetVar("arg", member)
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, shell.ReadVar("arg"))
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err, "main.sh(3:5)")
					return
				}

			}()
		}

	}()
}


#(ENDTEST)



#(TEST: simple `for...in` loop over operands)

for arg in foo bar baz; do
    echo $arg
done

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var members []string
		members = append(members, "foo")
		members = append(members, "bar")
		members = append(members, "baz")
		for _, member := range members {
			shell.SetVar("arg", member)
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, shell.ReadVar("arg"))
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err, "main.sh(3:5)")
					return
				}

			}()
		}

	}()
}

#(ENDTEST)



#(TEST: redirections on `for...in` loops)

for arg; do
    echo $arg
done >file.txt <input.txt

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		stream0, err := streamManager.OpenStream(shell.Path("file.txt"), runtime.STREAM_FLAG_WRITE)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("1", stream0)
		stream1, err := streamManager.OpenStream(shell.Path("input.txt"), runtime.STREAM_FLAG_READ)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("0", stream1)
		for _, member := range shell.Args {
			shell.SetVar("arg", member)
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "echo"
				var arguments []string
				var env = make(map[string]string)
				arguments = append(arguments, shell.ReadVar("arg"))
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err, "main.sh(3:5)")
					return
				}

			}()
		}

	}()
}


#(ENDTEST)





#(TEST: `break` and `continue` on `for...in` loops)

for arg; do
    break
done  

for arg; do
    continue
done  

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		var breakpoint1 = false
		_ = breakpoint1
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for _, member := range shell.Args {
			shell.SetVar("arg", member)
			breakpoint1 = true
			break
		}

	}()
	func() {
		var breakpoint2 = false
		_ = breakpoint2
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for _, member := range shell.Args {
			shell.SetVar("arg", member)
			breakpoint2 = true
			continue
		}

	}()
}

#(ENDTEST)



#(TEST: `break` and `continue` can be in list within `for...in` loops)

for arg; do
    true || break && continue
done  


#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		var breakpoint1 = false
		_ = breakpoint1
		var breakpoint2 = false
		_ = breakpoint2
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for _, member := range shell.Args {
			shell.SetVar("arg", member)
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var commandName = "true"
				var arguments []string
				var env = make(map[string]string)
				if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
					shell.HandleError(streamManager, err, "main.sh(3:5)")
					return
				}

			}()
			if shell.ExitCode != 0 {
				breakpoint1 = true
				break
			}
			if shell.ExitCode == 0 {
				breakpoint2 = true
				continue
			}
		}

	}()
}


#(ENDTEST)





#(TEST: `break` and `continue` can be nested in 'if' within `for...in` loops)

for arg; do
	if true; then 
		break 
	elif false; then 
		continue 
	fi
done  

for arg; do
	if true; then 
		if true; then 
			break 
		elif false; then 
			continue 
		fi
	fi
done  

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		var breakpoint1 = false
		_ = breakpoint1
		var breakpoint2 = false
		_ = breakpoint2
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for _, member := range shell.Args {
			shell.SetVar("arg", member)
			func() {
				var condition = false
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				func() {
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					var commandName = "true"
					var arguments []string
					var env = make(map[string]string)
					if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
						shell.HandleError(streamManager, err, "main.sh(3:5)")
						return
					}

				}()
				condition = shell.ExitCode == 0
				shell.ExitCode = 0
				if condition {
					breakpoint1 = true
					return
				} else {
					func() {
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						var commandName = "false"
						var arguments []string
						var env = make(map[string]string)
						if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
							shell.HandleError(streamManager, err, "main.sh(5:7)")
							return
						}

					}()
					condition = shell.ExitCode == 0
					shell.ExitCode = 0
					if condition {
						breakpoint2 = true
						return
					}
				}

			}()
			if breakpoint1 {
				break
			}
			if breakpoint2 {
				continue
			}
		}

	}()
	func() {
		var breakpoint3 = false
		_ = breakpoint3
		var breakpoint4 = false
		_ = breakpoint4
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for _, member := range shell.Args {
			shell.SetVar("arg", member)
			func() {
				var condition = false
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				func() {
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					var commandName = "true"
					var arguments []string
					var env = make(map[string]string)
					if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
						shell.HandleError(streamManager, err, "main.sh(11:5)")
						return
					}

				}()
				condition = shell.ExitCode == 0
				shell.ExitCode = 0
				if condition {
					func() {
						var condition = false
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						func() {
							streamManager := streamManager.Clone()
							defer streamManager.Destroy()
							var commandName = "true"
							var arguments []string
							var env = make(map[string]string)
							if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
								shell.HandleError(streamManager, err, "main.sh(12:6)")
								return
							}

						}()
						condition = shell.ExitCode == 0
						shell.ExitCode = 0
						if condition {
							breakpoint3 = true
							return
						} else {
							func() {
								streamManager := streamManager.Clone()
								defer streamManager.Destroy()
								var commandName = "false"
								var arguments []string
								var env = make(map[string]string)
								if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
									shell.HandleError(streamManager, err, "main.sh(14:8)")
									return
								}

							}()
							condition = shell.ExitCode == 0
							shell.ExitCode = 0
							if condition {
								breakpoint4 = true
								return
							}
						}

					}()
					if breakpoint3 {
						return
					}
					if breakpoint4 {
						return
					}
				}

			}()
			if breakpoint3 {
				break
			}
			if breakpoint4 {
				continue
			}
		}

	}()
}

#(ENDTEST)





#(TEST: `break` and `continue` can be nested in 'if' within `for...in` loops)

for arg; do
	case foo in 
		*) break;; 
		bar) continue;; 
	esac
done  

for arg; do
	case foo in 
		*)
			case foo in 
				*) break;; 
				bar) continue;; 
			esac
		;;
	esac
done  

#(RESULT)


package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		var breakpoint1 = false
		_ = breakpoint1
		var breakpoint2 = false
		_ = breakpoint2
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for _, member := range shell.Args {
			shell.SetVar("arg", member)
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var needle = "foo"
				var fallback = false
				var _ = fallback
				if runtime.PatternMatch(needle, "*") {
					breakpoint1 = true
					return
					return
				}
				if runtime.PatternMatch(needle, "bar") {
					breakpoint2 = true
					return
					return
				}

			}()
			if breakpoint1 {
				break
			}
			if breakpoint2 {
				continue
			}
		}

	}()
	func() {
		var breakpoint3 = false
		_ = breakpoint3
		var breakpoint4 = false
		_ = breakpoint4
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		for _, member := range shell.Args {
			shell.SetVar("arg", member)
			func() {
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				var needle = "foo"
				var fallback = false
				var _ = fallback
				if runtime.PatternMatch(needle, "*") {
					func() {
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						var needle = "foo"
						var fallback = false
						var _ = fallback
						if runtime.PatternMatch(needle, "*") {
							breakpoint3 = true
							return
							return
						}
						if runtime.PatternMatch(needle, "bar") {
							breakpoint4 = true
							return
							return
						}

					}()
					if breakpoint3 {
						return
					}
					if breakpoint4 {
						return
					}
					return
				}

			}()
			if breakpoint3 {
				break
			}
			if breakpoint4 {
				continue
			}
		}

	}()
}


#(ENDTEST)

