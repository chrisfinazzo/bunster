#(TEST: simple env var mutation)

key=value cmd key=value

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var commandName = "cmd"
		var arguments []string
		var env = make(map[string]string)
		arguments = append(arguments, "key=value")
		env["key"] = "value"
		if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
			shell.HandleError(streamManager, err)
			return
		}

	}()
}


#(ENDTEST)



#(TEST: multi env var mutation)

key1=value key2='value' key3="value" \
    key4=value cmd

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var commandName = "cmd"
		var arguments []string
		var env = make(map[string]string)
		env["key1"] = "value"
		env["key2"] = "value"
		env["key3"] = "value"
		env["key4"] = "value"
		if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
			shell.HandleError(streamManager, err)
			return
		}

	}()
}

#(ENDTEST)




#(TEST: passing zero env variables)

key= cmd

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var commandName = "cmd"
		var arguments []string
		var env = make(map[string]string)
		env["key"] = ""
		if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
			shell.HandleError(streamManager, err)
			return
		}

	}()
}


#(ENDTEST)
