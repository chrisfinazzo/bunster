#(TEST: simple env var mutation)
key=value cmd key=value
#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		var commandName = "cmd"
		var arguments []string
		arguments = append(arguments, "key=value")
		var command = shell.Command(commandName, arguments...)
		command.Env["key"] = "value"
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
        if stream, err := streamManager.Get("0"); err != nil {
            shell.HandleError(streamManager, err)
            return
        } else {
            command.Stdin = stream
        }
        if stream, err := streamManager.Get("1"); err != nil {
            shell.HandleError(streamManager, err)
            return
        } else {
            command.Stdout = stream
        }
        if stream, err := streamManager.Get("2"); err != nil {
            shell.HandleError(streamManager, err)
            return
        } else {
            command.Stderr = stream
        }
		if err := command.Run(); err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		shell.ExitCode = command.ExitCode

	}()
}

#(ENDTEST)



#(TEST: multi env var mutation)

key1=value key2='value' key3="value" \
    key4=value cmd

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		var commandName = "cmd"
		var arguments []string
		var command = shell.Command(commandName, arguments...)
		command.Env["key1"] = "value"
		command.Env["key2"] = "value"
		command.Env["key3"] = "value"
		command.Env["key4"] = "value"
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
        if stream, err := streamManager.Get("0"); err != nil {
            shell.HandleError(streamManager, err)
            return
        } else {
            command.Stdin = stream
        }
        if stream, err := streamManager.Get("1"); err != nil {
            shell.HandleError(streamManager, err)
            return
        } else {
            command.Stdout = stream
        }
        if stream, err := streamManager.Get("2"); err != nil {
            shell.HandleError(streamManager, err)
            return
        } else {
            command.Stderr = stream
        }
		if err := command.Run(); err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		shell.ExitCode = command.ExitCode

	}()
}

#(ENDTEST)




#(TEST: passing zero env variables)

key= cmd

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		var commandName = "cmd"
		var arguments []string
		var command = shell.Command(commandName, arguments...)
		command.Env["key"] = ""
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
        if stream, err := streamManager.Get("0"); err != nil {
            shell.HandleError(streamManager, err)
            return
        } else {
            command.Stdin = stream
        }
        if stream, err := streamManager.Get("1"); err != nil {
            shell.HandleError(streamManager, err)
            return
        } else {
            command.Stdout = stream
        }
        if stream, err := streamManager.Get("2"); err != nil {
            shell.HandleError(streamManager, err)
            return
        } else {
            command.Stderr = stream
        }
		if err := command.Run(); err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		shell.ExitCode = command.ExitCode

	}()
}

#(ENDTEST)
