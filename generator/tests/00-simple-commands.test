

#(TEST: blank script)

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
}
#(ENDTEST)




#(TEST: Comments only)

# hello world

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
}
#(ENDTEST)




#(TEST: simple command)

git

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var commandName = "git"
		var arguments []string
		var env = make(map[string]string)
		if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
			shell.HandleError(streamManager, err, "main.sh(2:1)")
			return
		}

	}()
}

#(ENDTEST)



#(TEST: command with arguments)

cmd arg 'arg 2' "arg 3" $ARG3

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var commandName = "cmd"
		var arguments []string
		var env = make(map[string]string)
		arguments = append(arguments, "arg")
		arguments = append(arguments, "arg 2")
		arguments = append(arguments, "arg 3")
		arguments = append(arguments, shell.ReadVar("ARG3"))
		if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
			shell.HandleError(streamManager, err, "main.sh(2:1)")
			return
		}

	}()
}

#(ENDTEST)


#(TEST: multiline command with arguments)

cmd --option=value \
    --option='value' \
    --option="value" \
    -o

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var commandName = "cmd"
		var arguments []string
		var env = make(map[string]string)
		arguments = append(arguments, "--option=value")
		arguments = append(arguments, "--option=value")
		arguments = append(arguments, "--option=value")
		arguments = append(arguments, "-o")
		if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
			shell.HandleError(streamManager, err, "main.sh(2:1)")
			return
		}

	}()
}

#(ENDTEST)



#(TEST: multiple commands)

cmd1
cmd2; cmd3

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var commandName = "cmd1"
		var arguments []string
		var env = make(map[string]string)
		if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
			shell.HandleError(streamManager, err, "main.sh(2:1)")
			return
		}

	}()
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var commandName = "cmd2"
		var arguments []string
		var env = make(map[string]string)
		if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
			shell.HandleError(streamManager, err, "main.sh(3:1)")
			return
		}

	}()
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var commandName = "cmd3"
		var arguments []string
		var env = make(map[string]string)
		if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
			shell.HandleError(streamManager, err, "main.sh(3:7)")
			return
		}

	}()
}

#(ENDTEST)




#(TEST: concatination)

"$HOME/bin/cmd" $PWD:/path 'foo-''bar-'"baz-"boo

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var commandName = shell.ReadVar("HOME") + "/bin/cmd"
		var arguments []string
		var env = make(map[string]string)
		arguments = append(arguments, shell.ReadVar("PWD")+":/path")
		arguments = append(arguments, "foo-bar-baz-boo")
		if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
			shell.HandleError(streamManager, err, "main.sh(2:1)")
			return
		}

	}()
}

#(ENDTEST)


#(TEST: special variables)

echo $1 $? $$ $#

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var commandName = "echo"
		var arguments []string
		var env = make(map[string]string)
		arguments = append(arguments, shell.ReadSpecialVar("1"))
		arguments = append(arguments, shell.ReadSpecialVar("?"))
		arguments = append(arguments, shell.ReadSpecialVar("$"))
		arguments = append(arguments, shell.ReadSpecialVar("#"))
		if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
			shell.HandleError(streamManager, err, "main.sh(2:1)")
			return
		}

	}()
}

#(ENDTEST)


#(TEST: exit builtin)

exit
exit 1
exit $exit_code

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	if err := shell.Exit("0"); err != nil {
		shell.HandleError(streamManager, err)
		return
	}
	if err := shell.Exit("1"); err != nil {
		shell.HandleError(streamManager, err)
		return
	}
	if err := shell.Exit(shell.ReadVar("exit_code")); err != nil {
		shell.HandleError(streamManager, err)
		return
	}
}

#(ENDTEST)
