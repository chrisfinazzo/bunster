#(TEST: list with "||" operator)

command || command2 || command3

#(RESULT)
package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	func() {
		var commandName = `command`
		var arguments []string
		var command = shell.Command(commandName, arguments...)
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		if stream, err := streamManager.Get(`0`); err != nil {
            shell.HandleError(err)
            return
        } else {
            command.Stdin = stream
        }
        if stream, err := streamManager.Get(`1`); err != nil {
            shell.HandleError(err)
            return
        } else {
            command.Stdout = stream
        }
        if stream, err := streamManager.Get(`2`); err != nil {
            shell.HandleError(err)
            return
        } else {
            command.Stderr = stream
        }
		if err := command.Run(); err != nil {
			shell.HandleError(err)
			return
		}
		shell.ExitCode = command.ExitCode

	}()
	if shell.ExitCode != 0 {
		func() {
			var commandName = `command2`
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			if stream, err := streamManager.Get(`0`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get(`1`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get(`2`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stderr = stream
            }
			if err := command.Run(); err != nil {
				shell.HandleError(err)
				return
			}
			shell.ExitCode = command.ExitCode

		}()

	}
	if shell.ExitCode != 0 {
		func() {
			var commandName = `command3`
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			if stream, err := streamManager.Get(`0`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get(`1`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get(`2`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stderr = stream
            }
			if err := command.Run(); err != nil {
				shell.HandleError(err)
				return
			}
			shell.ExitCode = command.ExitCode

		}()

	}
}

#(ENDTEST)



#(TEST: list with "&&" operator)

command && command2 && command3

#(RESULT)
package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	func() {
		var commandName = `command`
		var arguments []string
		var command = shell.Command(commandName, arguments...)
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		if stream, err := streamManager.Get(`0`); err != nil {
            shell.HandleError(err)
            return
        } else {
            command.Stdin = stream
        }
        if stream, err := streamManager.Get(`1`); err != nil {
            shell.HandleError(err)
            return
        } else {
            command.Stdout = stream
        }
        if stream, err := streamManager.Get(`2`); err != nil {
            shell.HandleError(err)
            return
        } else {
            command.Stderr = stream
        }
		if err := command.Run(); err != nil {
			shell.HandleError(err)
			return
		}
		shell.ExitCode = command.ExitCode

	}()
	if shell.ExitCode == 0 {
		func() {
			var commandName = `command2`
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			if stream, err := streamManager.Get(`0`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get(`1`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get(`2`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stderr = stream
            }
			if err := command.Run(); err != nil {
				shell.HandleError(err)
				return
			}
			shell.ExitCode = command.ExitCode

		}()

	}
	if shell.ExitCode == 0 {
		func() {
			var commandName = `command3`
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			if stream, err := streamManager.Get(`0`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get(`1`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get(`2`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stderr = stream
            }
			if err := command.Run(); err != nil {
				shell.HandleError(err)
				return
			}
			shell.ExitCode = command.ExitCode

		}()

	}
}

#(ENDTEST)




#(TEST: list with mixed "&&" and "||" operators)

command && command2 || command3

#(RESULT)
package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	func() {
		var commandName = `command`
		var arguments []string
		var command = shell.Command(commandName, arguments...)
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		if stream, err := streamManager.Get(`0`); err != nil {
            shell.HandleError(err)
            return
        } else {
            command.Stdin = stream
        }
        if stream, err := streamManager.Get(`1`); err != nil {
            shell.HandleError(err)
            return
        } else {
            command.Stdout = stream
        }
        if stream, err := streamManager.Get(`2`); err != nil {
            shell.HandleError(err)
            return
        } else {
            command.Stderr = stream
        }
		if err := command.Run(); err != nil {
			shell.HandleError(err)
			return
		}
		shell.ExitCode = command.ExitCode

	}()
	if shell.ExitCode == 0 {
		func() {
			var commandName = `command2`
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			if stream, err := streamManager.Get(`0`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get(`1`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get(`2`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stderr = stream
            }
			if err := command.Run(); err != nil {
				shell.HandleError(err)
				return
			}
			shell.ExitCode = command.ExitCode

		}()

	}
	if shell.ExitCode != 0 {
		func() {
			var commandName = `command3`
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			if stream, err := streamManager.Get(`0`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get(`1`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get(`2`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stderr = stream
            }
			if err := command.Run(); err != nil {
				shell.HandleError(err)
				return
			}
			shell.ExitCode = command.ExitCode

		}()

	}
}

#(ENDTEST)




#(TEST: lists of piplines)

command | command2 ||
    command3 |& command4 &&
    command5 | command6


#(RESULT)
package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	func() {
		var pipelineWaitgroup []func() error
		pipeReader1, pipeWriter1, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(err)
			return
		}
		func() {
			var commandName = `command`
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add(`1`, pipeWriter1)
			if stream, err := streamManager.Get(`0`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get(`1`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get(`2`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stderr = stream
            }
			if err := command.Start(); err != nil {
				shell.HandleError(err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
			     defer streamManager.Destroy()
			     return command.Wait()
			})

		}()
		func() {
			var commandName = `command2`
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			streamManager := streamManager.Clone()
			streamManager.Add(`0`, pipeReader1)
			if stream, err := streamManager.Get(`0`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stdin = stream
            }
            if stream, err := streamManager.Get(`1`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stdout = stream
            }
            if stream, err := streamManager.Get(`2`); err != nil {
                shell.HandleError(err)
                return
            } else {
                command.Stderr = stream
            }
			if err := command.Start(); err != nil {
				shell.HandleError(err)
				return
			}
			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
			     defer streamManager.Destroy()
			     return command.Wait()
			})

		}()
		for i, wait := range pipelineWaitgroup {
			if err := wait(); err != nil {
				shell.HandleError(err)
			}
			if i < (len(pipelineWaitgroup) - 1) {
				shell.ExitCode = 0
			}
		}

	}()
	if shell.ExitCode != 0 {
		func() {
			var pipelineWaitgroup []func() error
			pipeReader1, pipeWriter1, err := runtime.NewPipe()
			if err != nil {
				shell.HandleError(err)
				return
			}
			func() {
				var commandName = `command3`
				var arguments []string
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				streamManager.Add(`1`, pipeWriter1)
				streamManager.Add(`2`, pipeWriter1)
    			if stream, err := streamManager.Get(`0`); err != nil {
                    shell.HandleError(err)
                    return
                } else {
                    command.Stdin = stream
                }
                if stream, err := streamManager.Get(`1`); err != nil {
                    shell.HandleError(err)
                    return
                } else {
                    command.Stdout = stream
                }
                if stream, err := streamManager.Get(`2`); err != nil {
                    shell.HandleError(err)
                    return
                } else {
                    command.Stderr = stream
                }
				if err := command.Start(); err != nil {
					shell.HandleError(err)
					return
				}
    			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
    			     defer streamManager.Destroy()
    			     return command.Wait()
    			})

			}()
			func() {
				var commandName = `command4`
				var arguments []string
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				streamManager.Add(`0`, pipeReader1)
    			if stream, err := streamManager.Get(`0`); err != nil {
                    shell.HandleError(err)
                    return
                } else {
                    command.Stdin = stream
                }
                if stream, err := streamManager.Get(`1`); err != nil {
                    shell.HandleError(err)
                    return
                } else {
                    command.Stdout = stream
                }
                if stream, err := streamManager.Get(`2`); err != nil {
                    shell.HandleError(err)
                    return
                } else {
                    command.Stderr = stream
                }
				if err := command.Start(); err != nil {
					shell.HandleError(err)
					return
				}
    			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
    			     defer streamManager.Destroy()
    			     return command.Wait()
    			})

			}()
			for i, wait := range pipelineWaitgroup {
				if err := wait(); err != nil {
					shell.HandleError(err)
				}
				if i < (len(pipelineWaitgroup) - 1) {
					shell.ExitCode = 0
				}
			}

		}()

	}
	if shell.ExitCode == 0 {
		func() {
			var pipelineWaitgroup []func() error
			pipeReader1, pipeWriter1, err := runtime.NewPipe()
			if err != nil {
				shell.HandleError(err)
				return
			}
			func() {
				var commandName = `command5`
				var arguments []string
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				streamManager.Add(`1`, pipeWriter1)
    			if stream, err := streamManager.Get(`0`); err != nil {
                    shell.HandleError(err)
                    return
                } else {
                    command.Stdin = stream
                }
                if stream, err := streamManager.Get(`1`); err != nil {
                    shell.HandleError(err)
                    return
                } else {
                    command.Stdout = stream
                }
                if stream, err := streamManager.Get(`2`); err != nil {
                    shell.HandleError(err)
                    return
                } else {
                    command.Stderr = stream
                }
				if err := command.Start(); err != nil {
					shell.HandleError(err)
					return
				}
    			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
    			     defer streamManager.Destroy()
    			     return command.Wait()
    			})

			}()
			func() {
				var commandName = `command6`
				var arguments []string
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				streamManager.Add(`0`, pipeReader1)
    			if stream, err := streamManager.Get(`0`); err != nil {
                    shell.HandleError(err)
                    return
                } else {
                    command.Stdin = stream
                }
                if stream, err := streamManager.Get(`1`); err != nil {
                    shell.HandleError(err)
                    return
                } else {
                    command.Stdout = stream
                }
                if stream, err := streamManager.Get(`2`); err != nil {
                    shell.HandleError(err)
                    return
                } else {
                    command.Stderr = stream
                }
				if err := command.Start(); err != nil {
					shell.HandleError(err)
					return
				}
    			pipelineWaitgroup = append(pipelineWaitgroup, func() error{
    			     defer streamManager.Destroy()
    			     return command.Wait()
    			})

			}()
			for i, wait := range pipelineWaitgroup {
				if err := wait(); err != nil {
					shell.HandleError(err)
				}
				if i < (len(pipelineWaitgroup) - 1) {
					shell.ExitCode = 0
				}
			}

		}()

	}
}

#(ENDTEST)
