#(TEST: list with "||" operator)

command || command2 || command3

#(RESULT)
package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell) {
	func() {
		var commandName = `command`
		var arguments []string
		var command = shell.Command(commandName, arguments...)
		commandFDT, err := shell.CloneFDT()
		if err != nil {
			shell.HandleError(err)
			return
		}
		defer commandFDT.Destroy()
		command.Stdin = commandFDT.Get(`0`)
		command.Stdout = commandFDT.Get(`1`)
		command.Stderr = commandFDT.Get(`2`)
		if err := command.Run(); err != nil {
			shell.HandleError(err)
			return
		}
		shell.ExitCode = command.ProcessState.ExitCode()

	}()
	if shell.ExitCode != 0 {
		func() {
			var commandName = `command2`
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			commandFDT, err := shell.CloneFDT()
			if err != nil {
				shell.HandleError(err)
				return
			}
			defer commandFDT.Destroy()
			command.Stdin = commandFDT.Get(`0`)
			command.Stdout = commandFDT.Get(`1`)
			command.Stderr = commandFDT.Get(`2`)
			if err := command.Run(); err != nil {
				shell.HandleError(err)
				return
			}
			shell.ExitCode = command.ProcessState.ExitCode()

		}()

	}
	if shell.ExitCode != 0 {
		func() {
			var commandName = `command3`
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			commandFDT, err := shell.CloneFDT()
			if err != nil {
				shell.HandleError(err)
				return
			}
			defer commandFDT.Destroy()
			command.Stdin = commandFDT.Get(`0`)
			command.Stdout = commandFDT.Get(`1`)
			command.Stderr = commandFDT.Get(`2`)
			if err := command.Run(); err != nil {
				shell.HandleError(err)
				return
			}
			shell.ExitCode = command.ProcessState.ExitCode()

		}()

	}
}

#(ENDTEST)



#(TEST: list with "&&" operator)

command && command2 && command3

#(RESULT)
package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell) {
	func() {
		var commandName = `command`
		var arguments []string
		var command = shell.Command(commandName, arguments...)
		commandFDT, err := shell.CloneFDT()
		if err != nil {
			shell.HandleError(err)
			return
		}
		defer commandFDT.Destroy()
		command.Stdin = commandFDT.Get(`0`)
		command.Stdout = commandFDT.Get(`1`)
		command.Stderr = commandFDT.Get(`2`)
		if err := command.Run(); err != nil {
			shell.HandleError(err)
			return
		}
		shell.ExitCode = command.ProcessState.ExitCode()

	}()
	if shell.ExitCode == 0 {
		func() {
			var commandName = `command2`
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			commandFDT, err := shell.CloneFDT()
			if err != nil {
				shell.HandleError(err)
				return
			}
			defer commandFDT.Destroy()
			command.Stdin = commandFDT.Get(`0`)
			command.Stdout = commandFDT.Get(`1`)
			command.Stderr = commandFDT.Get(`2`)
			if err := command.Run(); err != nil {
				shell.HandleError(err)
				return
			}
			shell.ExitCode = command.ProcessState.ExitCode()

		}()

	}
	if shell.ExitCode == 0 {
		func() {
			var commandName = `command3`
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			commandFDT, err := shell.CloneFDT()
			if err != nil {
				shell.HandleError(err)
				return
			}
			defer commandFDT.Destroy()
			command.Stdin = commandFDT.Get(`0`)
			command.Stdout = commandFDT.Get(`1`)
			command.Stderr = commandFDT.Get(`2`)
			if err := command.Run(); err != nil {
				shell.HandleError(err)
				return
			}
			shell.ExitCode = command.ProcessState.ExitCode()

		}()

	}
}

#(ENDTEST)




#(TEST: list with mixed "&&" and "||" operators)

command && command2 || command3

#(RESULT)
package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell) {
	func() {
		var commandName = `command`
		var arguments []string
		var command = shell.Command(commandName, arguments...)
		commandFDT, err := shell.CloneFDT()
		if err != nil {
			shell.HandleError(err)
			return
		}
		defer commandFDT.Destroy()
		command.Stdin = commandFDT.Get(`0`)
		command.Stdout = commandFDT.Get(`1`)
		command.Stderr = commandFDT.Get(`2`)
		if err := command.Run(); err != nil {
			shell.HandleError(err)
			return
		}
		shell.ExitCode = command.ProcessState.ExitCode()

	}()
	if shell.ExitCode == 0 {
		func() {
			var commandName = `command2`
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			commandFDT, err := shell.CloneFDT()
			if err != nil {
				shell.HandleError(err)
				return
			}
			defer commandFDT.Destroy()
			command.Stdin = commandFDT.Get(`0`)
			command.Stdout = commandFDT.Get(`1`)
			command.Stderr = commandFDT.Get(`2`)
			if err := command.Run(); err != nil {
				shell.HandleError(err)
				return
			}
			shell.ExitCode = command.ProcessState.ExitCode()

		}()

	}
	if shell.ExitCode != 0 {
		func() {
			var commandName = `command3`
			var arguments []string
			var command = shell.Command(commandName, arguments...)
			commandFDT, err := shell.CloneFDT()
			if err != nil {
				shell.HandleError(err)
				return
			}
			defer commandFDT.Destroy()
			command.Stdin = commandFDT.Get(`0`)
			command.Stdout = commandFDT.Get(`1`)
			command.Stderr = commandFDT.Get(`2`)
			if err := command.Run(); err != nil {
				shell.HandleError(err)
				return
			}
			shell.ExitCode = command.ProcessState.ExitCode()

		}()

	}
}

#(ENDTEST)
