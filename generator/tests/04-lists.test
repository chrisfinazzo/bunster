#(TEST: list with "||" operator)

command || command2 || command3

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var commandName = "command"
		var arguments []string
		var env = make(map[string]string)
		if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
			shell.HandleError(streamManager, err)
			return
		}

	}()
	if shell.ExitCode != 0 {
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "command2"
			var arguments []string
			var env = make(map[string]string)
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err)
				return
			}

		}()

	}
	if shell.ExitCode != 0 {
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "command3"
			var arguments []string
			var env = make(map[string]string)
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err)
				return
			}

		}()

	}
}

#(ENDTEST)



#(TEST: list with "&&" operator)

command && command2 && command3

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var commandName = "command"
		var arguments []string
		var env = make(map[string]string)
		if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
			shell.HandleError(streamManager, err)
			return
		}

	}()
	if shell.ExitCode == 0 {
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "command2"
			var arguments []string
			var env = make(map[string]string)
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err)
				return
			}

		}()

	}
	if shell.ExitCode == 0 {
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "command3"
			var arguments []string
			var env = make(map[string]string)
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err)
				return
			}

		}()

	}
}


#(ENDTEST)




#(TEST: list with mixed "&&" and "||" operators)

command && command2 || command3

#(RESULT)


package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		var commandName = "command"
		var arguments []string
		var env = make(map[string]string)
		if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
			shell.HandleError(streamManager, err)
			return
		}

	}()
	if shell.ExitCode == 0 {
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "command2"
			var arguments []string
			var env = make(map[string]string)
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err)
				return
			}

		}()

	}
	if shell.ExitCode != 0 {
		func() {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			var commandName = "command3"
			var arguments []string
			var env = make(map[string]string)
			if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
				shell.HandleError(streamManager, err)
				return
			}

		}()

	}
}


#(ENDTEST)




#(TEST: lists of piplines)

command | command2 ||
    command3 |& command4 &&
    command5 | command6


#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
	defer shell.Terminate(streamManager)
	func() {
		var pipelineWaitgroup []func() int
		pipeReader1, pipeWriter1, err := runtime.NewPipe()
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add("1", pipeWriter1)
			shell := shell.Clone()
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, func() int {
				<-done
				shell.Terminate(streamManager)
				streamManager.Destroy()
				return shell.ExitCode
			})
			go func() {
				defer func() { done <- struct{}{} }()
				func() {
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					var commandName = "command"
					var arguments []string
					var env = make(map[string]string)
					if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
						shell.HandleError(streamManager, err)
						return
					}

				}()

			}()

		}()
		func() {
			streamManager := streamManager.Clone()
			streamManager.Add("0", pipeReader1)
			shell := shell.Clone()
			var done = make(chan struct{}, 1)
			pipelineWaitgroup = append(pipelineWaitgroup, func() int {
				<-done
				shell.Terminate(streamManager)
				streamManager.Destroy()
				return shell.ExitCode
			})
			go func() {
				defer func() { done <- struct{}{} }()
				func() {
					streamManager := streamManager.Clone()
					defer streamManager.Destroy()
					var commandName = "command2"
					var arguments []string
					var env = make(map[string]string)
					if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
						shell.HandleError(streamManager, err)
						return
					}

				}()

			}()

		}()
		for _, wait := range pipelineWaitgroup {
			shell.ExitCode = wait()
		}

	}()
	if shell.ExitCode != 0 {
		func() {
			var pipelineWaitgroup []func() int
			pipeReader1, pipeWriter1, err := runtime.NewPipe()
			if err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			func() {
				streamManager := streamManager.Clone()
				streamManager.Add("1", pipeWriter1)
				streamManager.Add("2", pipeWriter1)
				shell := shell.Clone()
				var done = make(chan struct{}, 1)
				pipelineWaitgroup = append(pipelineWaitgroup, func() int {
					<-done
					shell.Terminate(streamManager)
					streamManager.Destroy()
					return shell.ExitCode
				})
				go func() {
					defer func() { done <- struct{}{} }()
					func() {
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						var commandName = "command3"
						var arguments []string
						var env = make(map[string]string)
						if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
							shell.HandleError(streamManager, err)
							return
						}

					}()

				}()

			}()
			func() {
				streamManager := streamManager.Clone()
				streamManager.Add("0", pipeReader1)
				shell := shell.Clone()
				var done = make(chan struct{}, 1)
				pipelineWaitgroup = append(pipelineWaitgroup, func() int {
					<-done
					shell.Terminate(streamManager)
					streamManager.Destroy()
					return shell.ExitCode
				})
				go func() {
					defer func() { done <- struct{}{} }()
					func() {
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						var commandName = "command4"
						var arguments []string
						var env = make(map[string]string)
						if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
							shell.HandleError(streamManager, err)
							return
						}

					}()

				}()

			}()
			for _, wait := range pipelineWaitgroup {
				shell.ExitCode = wait()
			}

		}()

	}
	if shell.ExitCode == 0 {
		func() {
			var pipelineWaitgroup []func() int
			pipeReader1, pipeWriter1, err := runtime.NewPipe()
			if err != nil {
				shell.HandleError(streamManager, err)
				return
			}
			func() {
				streamManager := streamManager.Clone()
				streamManager.Add("1", pipeWriter1)
				shell := shell.Clone()
				var done = make(chan struct{}, 1)
				pipelineWaitgroup = append(pipelineWaitgroup, func() int {
					<-done
					shell.Terminate(streamManager)
					streamManager.Destroy()
					return shell.ExitCode
				})
				go func() {
					defer func() { done <- struct{}{} }()
					func() {
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						var commandName = "command5"
						var arguments []string
						var env = make(map[string]string)
						if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
							shell.HandleError(streamManager, err)
							return
						}

					}()

				}()

			}()
			func() {
				streamManager := streamManager.Clone()
				streamManager.Add("0", pipeReader1)
				shell := shell.Clone()
				var done = make(chan struct{}, 1)
				pipelineWaitgroup = append(pipelineWaitgroup, func() int {
					<-done
					shell.Terminate(streamManager)
					streamManager.Destroy()
					return shell.ExitCode
				})
				go func() {
					defer func() { done <- struct{}{} }()
					func() {
						streamManager := streamManager.Clone()
						defer streamManager.Destroy()
						var commandName = "command6"
						var arguments []string
						var env = make(map[string]string)
						if err := shell.Exec(streamManager, commandName, arguments, env); err != nil {
							shell.HandleError(streamManager, err)
							return
						}

					}()

				}()

			}()
			for _, wait := range pipelineWaitgroup {
				shell.ExitCode = wait()
			}

		}()

	}
}

#(ENDTEST)
