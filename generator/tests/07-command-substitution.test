#(TEST: simple command substitution)

$( command )

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		expr2, exitCode := func() (string, int) {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			shell := shell.Clone()
			defer shell.Terminate(streamManager)
			var buffer = runtime.NewBuffer("", false)
			streamManager.Add("1", buffer)
			func() {
				var commandName = "command"
				var arguments []string
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
			return buffer.String(true), shell.ExitCode
		}()
		if exitCode != 0 {
		    shell.ExitCode = exitCode
			return
		}
		var commandName = expr2
		var arguments []string
		var command = shell.Command(commandName, arguments...)
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		if stream, err := streamManager.Get("0"); err != nil {
			shell.HandleError(streamManager, err)
			return
		} else {
			command.Stdin = stream
		}
		if stream, err := streamManager.Get("1"); err != nil {
			shell.HandleError(streamManager, err)
			return
		} else {
			command.Stdout = stream
		}
		if stream, err := streamManager.Get("2"); err != nil {
			shell.HandleError(streamManager, err)
			return
		} else {
			command.Stderr = stream
		}
		if err := command.Run(); err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		shell.ExitCode = command.ExitCode

	}()
}

#(ENDTEST)


#(TEST: command substitution concatinated)

"/path/$( program )"

#(RESULT)
package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		expr4, exitCode := func() (string, int) {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			shell := shell.Clone()
			defer shell.Terminate(streamManager)
			var buffer = runtime.NewBuffer("", false)
			streamManager.Add("1", buffer)
			func() {
				var commandName = "program"
				var arguments []string
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
			return buffer.String(true), shell.ExitCode
		}()
		if exitCode != 0 {
		    shell.ExitCode = exitCode
			return
		}
		var commandName = "/path/" + expr4
		var arguments []string
		var command = shell.Command(commandName, arguments...)
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		if stream, err := streamManager.Get("0"); err != nil {
			shell.HandleError(streamManager, err)
			return
		} else {
			command.Stdin = stream
		}
		if stream, err := streamManager.Get("1"); err != nil {
			shell.HandleError(streamManager, err)
			return
		} else {
			command.Stdout = stream
		}
		if stream, err := streamManager.Get("2"); err != nil {
			shell.HandleError(streamManager, err)
			return
		} else {
			command.Stderr = stream
		}
		if err := command.Run(); err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		shell.ExitCode = command.ExitCode

	}()
}

#(ENDTEST)


#(TEST: command substituion as argument)

cmd $( subcommand )

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		var commandName = "cmd"
		var arguments []string
		expr3, exitCode := func() (string, int) {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			shell := shell.Clone()
			defer shell.Terminate(streamManager)
			var buffer = runtime.NewBuffer("", false)
			streamManager.Add("1", buffer)
			func() {
				var commandName = "subcommand"
				var arguments []string
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
			return buffer.String(true), shell.ExitCode
		}()
		if exitCode != 0 {
		    shell.ExitCode = exitCode
			return
		}
		arguments = append(arguments, expr3)
		var command = shell.Command(commandName, arguments...)
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		if stream, err := streamManager.Get("0"); err != nil {
			shell.HandleError(streamManager, err)
			return
		} else {
			command.Stdin = stream
		}
		if stream, err := streamManager.Get("1"); err != nil {
			shell.HandleError(streamManager, err)
			return
		} else {
			command.Stdout = stream
		}
		if stream, err := streamManager.Get("2"); err != nil {
			shell.HandleError(streamManager, err)
			return
		} else {
			command.Stderr = stream
		}
		if err := command.Run(); err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		shell.ExitCode = command.ExitCode

	}()
}

#(ENDTEST)



#(TEST: command as expression in redirection)

cat <$(echo file.txt)

#(RESULT)

package main

import "github.com/yassinebenaid/bunster/runtime"

func Main(shell *runtime.Shell, streamManager *runtime.StreamManager) {
    defer shell.Terminate(streamManager)
	func() {
		var commandName = "cat"
		var arguments []string
		var command = shell.Command(commandName, arguments...)
		streamManager := streamManager.Clone()
		defer streamManager.Destroy()
		expr4, exitCode := func() (string, int) {
			streamManager := streamManager.Clone()
			defer streamManager.Destroy()
			shell := shell.Clone()
			defer shell.Terminate(streamManager)
			var buffer = runtime.NewBuffer("", false)
			streamManager.Add("1", buffer)
			func() {
				var commandName = "echo"
				var arguments []string
				arguments = append(arguments, "file.txt")
				var command = shell.Command(commandName, arguments...)
				streamManager := streamManager.Clone()
				defer streamManager.Destroy()
				if stream, err := streamManager.Get("0"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdin = stream
				}
				if stream, err := streamManager.Get("1"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stdout = stream
				}
				if stream, err := streamManager.Get("2"); err != nil {
					shell.HandleError(streamManager, err)
					return
				} else {
					command.Stderr = stream
				}
				if err := command.Run(); err != nil {
					shell.HandleError(streamManager, err)
					return
				}
				shell.ExitCode = command.ExitCode

			}()
			return buffer.String(true), shell.ExitCode
		}()
		if exitCode != 0 {
			shell.ExitCode = exitCode
			return
		}
		stream0, err := streamManager.OpenStream(expr4, runtime.STREAM_FLAG_READ)
		if err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		streamManager.Add("0", stream0)
		if stream, err := streamManager.Get("0"); err != nil {
			shell.HandleError(streamManager, err)
			return
		} else {
			command.Stdin = stream
		}
		if stream, err := streamManager.Get("1"); err != nil {
			shell.HandleError(streamManager, err)
			return
		} else {
			command.Stdout = stream
		}
		if stream, err := streamManager.Get("2"); err != nil {
			shell.HandleError(streamManager, err)
			return
		} else {
			command.Stderr = stream
		}
		if err := command.Run(); err != nil {
			shell.HandleError(streamManager, err)
			return
		}
		shell.ExitCode = command.ExitCode

	}()
}

#(ENDTEST)
