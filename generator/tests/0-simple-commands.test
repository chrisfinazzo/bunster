

#(TEST: blank script)

#(RESULT)
package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell) {
}
#(ENDTEST)




#(TEST: Comments only)

# hello world

#(RESULT)
package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell) {
}
#(ENDTEST)




#(TEST: simple command)

git

#(RESULT)

package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell) {
    func() {
  		var cmd_0_name = `git`
  		var cmd_0_args []string
  		var cmd_0 = shell.Command(cmd_0_name, cmd_0_args...)
  		cmd_0_fdt, err := shell.CloneFDT()
  		if err != nil {
 			shell.HandleError("", err)
 			return
  		}
  		defer cmd_0_fdt.Destroy()
  		cmd_0.Stdin = cmd_0_fdt.Get(`0`)
  		cmd_0.Stdout = cmd_0_fdt.Get(`1`)
  		cmd_0.Stderr = cmd_0_fdt.Get(`2`)
  		if err := cmd_0.Run(); err != nil {
 			shell.HandleError(cmd_0_name, err)
 			return
  		}

   	}()
}
#(ENDTEST)



#(TEST: command with arguments)

cmd arg 'arg 2' "arg 3" $ARG3

#(RESULT)

package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell) {
    func() {
  		var cmd_0_name = `cmd`
  		var cmd_0_args []string
        cmd_0_args = append(cmd_0_args, `arg`)
        cmd_0_args = append(cmd_0_args, `arg 2`)
        cmd_0_args = append(cmd_0_args, `arg 3`)
        cmd_0_args = append(cmd_0_args, shell.ReadVar("ARG3"))
  		var cmd_0 = shell.Command(cmd_0_name, cmd_0_args...)
  		cmd_0_fdt, err := shell.CloneFDT()
  		if err != nil {
 			shell.HandleError("", err)
 			return
  		}
  		defer cmd_0_fdt.Destroy()
  		cmd_0.Stdin = cmd_0_fdt.Get(`0`)
  		cmd_0.Stdout = cmd_0_fdt.Get(`1`)
  		cmd_0.Stderr = cmd_0_fdt.Get(`2`)
  		if err := cmd_0.Run(); err != nil {
 			shell.HandleError(cmd_0_name, err)
 			return
  		}

   	}()
}
#(ENDTEST)


#(TEST: multiline command with arguments)

cmd --option=value \
    --option='value' \
    --option="value" \
    -o

#(RESULT)

package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell) {
    func() {
  		var cmd_0_name = `cmd`
  		var cmd_0_args []string
        cmd_0_args = append(cmd_0_args, `--option=value`)
        cmd_0_args = append(cmd_0_args, `--option=value`)
        cmd_0_args = append(cmd_0_args, `--option=value`)
        cmd_0_args = append(cmd_0_args, `-o`)
  		var cmd_0 = shell.Command(cmd_0_name, cmd_0_args...)
  		cmd_0_fdt, err := shell.CloneFDT()
  		if err != nil {
 			shell.HandleError("", err)
 			return
  		}
  		defer cmd_0_fdt.Destroy()
  		cmd_0.Stdin = cmd_0_fdt.Get(`0`)
  		cmd_0.Stdout = cmd_0_fdt.Get(`1`)
  		cmd_0.Stderr = cmd_0_fdt.Get(`2`)
  		if err := cmd_0.Run(); err != nil {
 			shell.HandleError(cmd_0_name, err)
 			return
  		}

   	}()
}
#(ENDTEST)
