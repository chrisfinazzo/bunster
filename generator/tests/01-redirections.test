

#(TEST: output redirection)

git >output.txt 2>|errors.txt 3>'file.txt' 4>"file.txt"

#(RESULT)

package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell) {
    func() {
  		var cmd_0_name = `git`
  		var cmd_0_args []string
  		var cmd_0 = shell.Command(cmd_0_name, cmd_0_args...)
  		cmd_0_fdt, err := shell.CloneFDT()
  		if err != nil {
 			shell.HandleError("", err)
 			return
  		}
  		defer cmd_0_fdt.Destroy()
        cmd_0_file_0, err := runtime.OpenStream(`output.txt`, runtime.STREAM_FLAG_WRITE)
        if err != nil {
        shell.HandleError("", err)
            return
        }
        cmd_0_fdt.Add(`1`, cmd_0_file_0)
        cmd_0_file_1, err := runtime.OpenStream(`errors.txt`, runtime.STREAM_FLAG_WRITE)
        if err != nil {
        shell.HandleError("", err)
            return
        }
        cmd_0_fdt.Add(`2`, cmd_0_file_1)
        cmd_0_file_2, err := runtime.OpenStream(`file.txt`, runtime.STREAM_FLAG_WRITE)
        if err != nil {
        shell.HandleError("", err)
            return
        }
        cmd_0_fdt.Add(`3`, cmd_0_file_2)
        cmd_0_file_3, err := runtime.OpenStream(`file.txt`, runtime.STREAM_FLAG_WRITE)
        if err != nil {
        shell.HandleError("", err)
            return
        }
        cmd_0_fdt.Add(`4`, cmd_0_file_3)
  		cmd_0.Stdin = cmd_0_fdt.Get(`0`)
  		cmd_0.Stdout = cmd_0_fdt.Get(`1`)
  		cmd_0.Stderr = cmd_0_fdt.Get(`2`)
  		if err := cmd_0.Run(); err != nil {
 			shell.HandleError(cmd_0_name, err)
 			return
  		}
        shell.ExitCode = cmd_0.ProcessState.ExitCode()

   	}()
}
#(ENDTEST)




#(TEST: output appending redirection)

git >>output.txt 2>>errors.txt 3>>'file.txt' 4>>"file.txt"

#(RESULT)

package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell) {
    func() {
  		var cmd_0_name = `git`
  		var cmd_0_args []string
  		var cmd_0 = shell.Command(cmd_0_name, cmd_0_args...)
  		cmd_0_fdt, err := shell.CloneFDT()
  		if err != nil {
 			shell.HandleError("", err)
 			return
  		}
  		defer cmd_0_fdt.Destroy()
        cmd_0_file_0, err := runtime.OpenStream(`output.txt`, runtime.STREAM_FLAG_APPEND)
        if err != nil {
        shell.HandleError("", err)
            return
        }
        cmd_0_fdt.Add(`1`, cmd_0_file_0)
        cmd_0_file_1, err := runtime.OpenStream(`errors.txt`, runtime.STREAM_FLAG_APPEND)
        if err != nil {
        shell.HandleError("", err)
            return
        }
        cmd_0_fdt.Add(`2`, cmd_0_file_1)
        cmd_0_file_2, err := runtime.OpenStream(`file.txt`, runtime.STREAM_FLAG_APPEND)
        if err != nil {
        shell.HandleError("", err)
            return
        }
        cmd_0_fdt.Add(`3`, cmd_0_file_2)
        cmd_0_file_3, err := runtime.OpenStream(`file.txt`, runtime.STREAM_FLAG_APPEND)
        if err != nil {
        shell.HandleError("", err)
            return
        }
        cmd_0_fdt.Add(`4`, cmd_0_file_3)
  		cmd_0.Stdin = cmd_0_fdt.Get(`0`)
  		cmd_0.Stdout = cmd_0_fdt.Get(`1`)
  		cmd_0.Stderr = cmd_0_fdt.Get(`2`)
  		if err := cmd_0.Run(); err != nil {
 			shell.HandleError(cmd_0_name, err)
 			return
  		}
        shell.ExitCode = cmd_0.ProcessState.ExitCode()

   	}()
}
#(ENDTEST)



#(TEST: all output redirection)

git &>output.txt &>>'file.txt'

#(RESULT)

package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell) {
    func() {
  		var cmd_0_name = `git`
  		var cmd_0_args []string
  		var cmd_0 = shell.Command(cmd_0_name, cmd_0_args...)
  		cmd_0_fdt, err := shell.CloneFDT()
  		if err != nil {
 			shell.HandleError("", err)
 			return
  		}
  		defer cmd_0_fdt.Destroy()
        cmd_0_file_0, err := runtime.OpenStream(`output.txt`, runtime.STREAM_FLAG_WRITE)
        if err != nil {
        shell.HandleError("", err)
            return
        }
        cmd_0_fdt.Add(`1`, cmd_0_file_0)
        cmd_0_fdt.Add(`2`, cmd_0_file_0)
        cmd_0_file_1, err := runtime.OpenStream(`file.txt`, runtime.STREAM_FLAG_APPEND)
        if err != nil {
        shell.HandleError("", err)
            return
        }
        cmd_0_fdt.Add(`1`, cmd_0_file_1)
        cmd_0_fdt.Add(`2`, cmd_0_file_1)
  		cmd_0.Stdin = cmd_0_fdt.Get(`0`)
  		cmd_0.Stdout = cmd_0_fdt.Get(`1`)
  		cmd_0.Stderr = cmd_0_fdt.Get(`2`)
  		if err := cmd_0.Run(); err != nil {
 			shell.HandleError(cmd_0_name, err)
 			return
  		}
        shell.ExitCode = cmd_0.ProcessState.ExitCode()

   	}()
}
#(ENDTEST)





#(TEST: output file descriptor duplication and closing)

git 3>file.txt >&3- 2>&1  4>>file.txt 4>&-

#(RESULT)

package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell) {
    func() {
  		var cmd_0_name = `git`
  		var cmd_0_args []string
  		var cmd_0 = shell.Command(cmd_0_name, cmd_0_args...)
  		cmd_0_fdt, err := shell.CloneFDT()
  		if err != nil {
 			shell.HandleError("", err)
 			return
  		}
  		defer cmd_0_fdt.Destroy()
        cmd_0_file_0, err := runtime.OpenStream(`file.txt`, runtime.STREAM_FLAG_WRITE)
        if err != nil {
            shell.HandleError("", err)
            return
        }
        cmd_0_fdt.Add(`3`, cmd_0_file_0)
        if err := cmd_0_fdt.Duplicate("1", `3`); err != nil {
            shell.HandleError("", err)
            return
        }
        if err := cmd_0_fdt.Close(`3`); err != nil {
            shell.HandleError("", err)
            return
        }
        if err := cmd_0_fdt.Duplicate("2", `1`); err != nil {
            shell.HandleError("", err)
            return
        }
        cmd_0_file_3, err := runtime.OpenStream(`file.txt`, runtime.STREAM_FLAG_APPEND)
        if err != nil {
            shell.HandleError("", err)
            return
        }
        cmd_0_fdt.Add(`4`, cmd_0_file_3)
        if err := cmd_0_fdt.Close(`4`); err != nil {
            shell.HandleError("", err)
            return
        }
  		cmd_0.Stdin = cmd_0_fdt.Get(`0`)
  		cmd_0.Stdout = cmd_0_fdt.Get(`1`)
  		cmd_0.Stderr = cmd_0_fdt.Get(`2`)
  		if err := cmd_0.Run(); err != nil {
 			shell.HandleError(cmd_0_name, err)
 			return
  		}
        shell.ExitCode = cmd_0.ProcessState.ExitCode()

   	}()
}
#(ENDTEST)




#(TEST: input redirection)

git <output.txt 2<errors.txt 3<'file.txt' 4<"file.txt"

#(RESULT)

package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell) {
    func() {
  		var cmd_0_name = `git`
  		var cmd_0_args []string
  		var cmd_0 = shell.Command(cmd_0_name, cmd_0_args...)
  		cmd_0_fdt, err := shell.CloneFDT()
  		if err != nil {
 			shell.HandleError("", err)
 			return
  		}
  		defer cmd_0_fdt.Destroy()
        cmd_0_file_0, err := runtime.OpenStream(`output.txt`, runtime.STREAM_FLAG_READ)
        if err != nil {
        shell.HandleError("", err)
            return
        }
        cmd_0_fdt.Add(`0`, cmd_0_file_0)
        cmd_0_file_1, err := runtime.OpenStream(`errors.txt`, runtime.STREAM_FLAG_READ)
        if err != nil {
        shell.HandleError("", err)
            return
        }
        cmd_0_fdt.Add(`2`, cmd_0_file_1)
        cmd_0_file_2, err := runtime.OpenStream(`file.txt`, runtime.STREAM_FLAG_READ)
        if err != nil {
        shell.HandleError("", err)
            return
        }
        cmd_0_fdt.Add(`3`, cmd_0_file_2)
        cmd_0_file_3, err := runtime.OpenStream(`file.txt`, runtime.STREAM_FLAG_READ)
        if err != nil {
        shell.HandleError("", err)
            return
        }
        cmd_0_fdt.Add(`4`, cmd_0_file_3)
  		cmd_0.Stdin = cmd_0_fdt.Get(`0`)
  		cmd_0.Stdout = cmd_0_fdt.Get(`1`)
  		cmd_0.Stderr = cmd_0_fdt.Get(`2`)
  		if err := cmd_0.Run(); err != nil {
 			shell.HandleError(cmd_0_name, err)
 			return
  		}
        shell.ExitCode = cmd_0.ProcessState.ExitCode()

   	}()
}
#(ENDTEST)



#(TEST: here string input redirection)

git <<< Foo 2<<< 'Foo Bar'

#(RESULT)

package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell) {
    func() {
  		var cmd_0_name = `git`
  		var cmd_0_args []string
  		var cmd_0 = shell.Command(cmd_0_name, cmd_0_args...)
  		cmd_0_fdt, err := shell.CloneFDT()
  		if err != nil {
 			shell.HandleError("", err)
 			return
  		}
  		defer cmd_0_fdt.Destroy()
        var cmd_0_file_0 = runtime.NewStringStream(`Foo`)
        cmd_0_fdt.Add(`0`, cmd_0_file_0)
        var cmd_0_file_1 = runtime.NewStringStream(`Foo Bar`)
        cmd_0_fdt.Add(`2`, cmd_0_file_1)
  		cmd_0.Stdin = cmd_0_fdt.Get(`0`)
  		cmd_0.Stdout = cmd_0_fdt.Get(`1`)
  		cmd_0.Stderr = cmd_0_fdt.Get(`2`)
  		if err := cmd_0.Run(); err != nil {
 			shell.HandleError(cmd_0_name, err)
 			return
  		}
        shell.ExitCode = cmd_0.ProcessState.ExitCode()

   	}()
}
#(ENDTEST)




#(TEST: output file descriptor duplication and closing)

git 3<file.txt <&3- 2<&1  4<<<foobar 4<&-

#(RESULT)

package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell) {
    func() {
  		var cmd_0_name = `git`
  		var cmd_0_args []string
  		var cmd_0 = shell.Command(cmd_0_name, cmd_0_args...)
  		cmd_0_fdt, err := shell.CloneFDT()
  		if err != nil {
 			shell.HandleError("", err)
 			return
  		}
  		defer cmd_0_fdt.Destroy()
        cmd_0_file_0, err := runtime.OpenStream(`file.txt`, runtime.STREAM_FLAG_READ)
        if err != nil {
            shell.HandleError("", err)
            return
        }
        cmd_0_fdt.Add(`3`, cmd_0_file_0)
        if err := cmd_0_fdt.Duplicate("0", `3`); err != nil {
            shell.HandleError("", err)
            return
        }
        if err := cmd_0_fdt.Close(`3`); err != nil {
            shell.HandleError("", err)
            return
        }
        if err := cmd_0_fdt.Duplicate("2", `1`); err != nil {
            shell.HandleError("", err)
            return
        }
        var cmd_0_file_3 = runtime.NewStringStream(`foobar`)
        cmd_0_fdt.Add(`4`, cmd_0_file_3)
        if err := cmd_0_fdt.Close(`4`); err != nil {
            shell.HandleError("", err)
            return
        }
  		cmd_0.Stdin = cmd_0_fdt.Get(`0`)
  		cmd_0.Stdout = cmd_0_fdt.Get(`1`)
  		cmd_0.Stderr = cmd_0_fdt.Get(`2`)
  		if err := cmd_0.Run(); err != nil {
 			shell.HandleError(cmd_0_name, err)
 			return
  		}
        shell.ExitCode = cmd_0.ProcessState.ExitCode()

   	}()
}
#(ENDTEST)


#(TEST: output redirection)

git <>file.txt 2<>file.txt

#(RESULT)

package main

import "bunster-build/runtime"

func Main(shell *runtime.Shell) {
    func() {
  		var cmd_0_name = `git`
  		var cmd_0_args []string
  		var cmd_0 = shell.Command(cmd_0_name, cmd_0_args...)
  		cmd_0_fdt, err := shell.CloneFDT()
  		if err != nil {
 			shell.HandleError("", err)
 			return
  		}
  		defer cmd_0_fdt.Destroy()
        cmd_0_file_0, err := runtime.OpenStream(`file.txt`, runtime.STREAM_FLAG_RW)
        if err != nil {
        shell.HandleError("", err)
            return
        }
        cmd_0_fdt.Add(`0`, cmd_0_file_0)
        cmd_0_file_1, err := runtime.OpenStream(`file.txt`, runtime.STREAM_FLAG_RW)
        if err != nil {
        shell.HandleError("", err)
            return
        }
        cmd_0_fdt.Add(`2`, cmd_0_file_1)
  		cmd_0.Stdin = cmd_0_fdt.Get(`0`)
  		cmd_0.Stdout = cmd_0_fdt.Get(`1`)
  		cmd_0.Stderr = cmd_0_fdt.Get(`2`)
  		if err := cmd_0.Run(); err != nil {
 			shell.HandleError(cmd_0_name, err)
 			return
  		}
        shell.ExitCode = cmd_0.ProcessState.ExitCode()

   	}()
}
#(ENDTEST)
